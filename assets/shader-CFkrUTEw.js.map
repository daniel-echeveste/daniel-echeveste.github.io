{"version":3,"file":"shader-CFkrUTEw.js","sources":["../../src/shaders/particlesMorphing/vertex.glsl","../../src/shaders/particlesMorphing/fragment.glsl","../../src/shaders/particlesMorphing/shader.jsx"],"sourcesContent":["uniform vec2 uResolution;\r\nuniform float uSize;\r\nuniform float uProgress;\r\nuniform vec3 uColorA;\r\nuniform vec3 uColorB;\r\n\r\nattribute vec3 aPositionTarget;\r\nattribute float aSize;\r\n\r\nvarying vec3 vColor;\r\n#include ../includes/simplexNoise.glsl\r\nvoid main ()\r\n{\r\n    //mixed position\r\n    float noiseOrigin = simplexNoise3d(position * 0.2);\r\n    float noisTarget = simplexNoise3d(aPositionTarget * 0.2);\r\n    float noise = mix(noiseOrigin, noisTarget, uProgress);\r\n    noise = smoothstep(-1.0, 1.0 ,noise);\r\n    float duration = 0.4;\r\n    float delay = (1.0 - duration) * noise;\r\n    float end = delay + duration;\r\n    float progress = smoothstep(delay, end, uProgress);\r\n    vec3 mixedPosition = mix(position, aPositionTarget, progress);\r\n\r\n    //final position\r\n    vec4 modelPosition = modelMatrix * vec4(mixedPosition, 1.0);\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectedPosition = projectionMatrix * viewPosition;\r\n    gl_Position = projectedPosition;\r\n    // point size\r\n    gl_PointSize = uSize * uResolution.y * aSize;\r\n    gl_PointSize *= (1.0 / -viewPosition.z);\r\n\r\n    //VARYINGS\r\n    vColor = mix(uColorA, uColorB, noise);\r\n}","\r\nvarying vec3 vColor;\r\n\r\nvoid main(){\r\n\r\n    vec2 uv = gl_PointCoord;\r\n    float distanceToCenter = length(uv - 0.5); // can be done with distance()\r\n    float alpha = 0.05 / distanceToCenter -0.1;\r\n\r\n    vec3 color = vec3(1.0);\r\n    gl_FragColor = vec4(vColor, alpha);\r\n\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>   \r\n}","import vertexShader from \"./vertex.glsl\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport * as THREE from \"three\"\r\nimport gsap from \"gsap\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport ExampleModel from \"../../models/models\";\r\nimport { useControls, button } from \"leva\";\r\n\r\nimport { useGLTF } from \"@react-three/drei\"\r\nimport { Suspense } from \"react\";\r\nimport Placeholder from \"../../models/Placeholder\";\r\n\r\nexport default function ParticlesMorphing(args) {\r\n    // const particlesGeometry = useRef()\r\n\r\n    const morph = (index) => {\r\n        //update attribute \r\n        console.log(index);\r\n\r\n        particles.geometry.attributes.position = particles.positions[particles.index]\r\n        particles.geometry.attributes.aPositionTarget = particles.positions[index]\r\n\r\n        gsap.fromTo(\r\n            particles.material.uniforms.uProgress,\r\n            { value: 0 },\r\n            { value: 1, duration: 3, ease: \"linear\" }\r\n        )\r\n        particles.index = index\r\n    }\r\n\r\n\r\n    const sizes = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    }\r\n    const particles = {}\r\n    // particles.morph1 = ()=>morph(0)\r\n    // particles.morph2 = ()=>morph(1)\r\n    // particles.morph3 = ()=>morph(2)\r\n    // particles.morph4 = ()=>morph(3)\r\n    const controls = useControls({\r\n        progress: { value: 0, min: 0, max: 1 },\r\n        colorA: { value: '#ff7300' },\r\n        colorB: { value: '#0091ff' },\r\n        shape1: button(() => {\r\n            morph(0)\r\n            // particles.morph2()\r\n        }),\r\n        shape2: button(() => {\r\n            morph(1)\r\n            // particles.morph2()\r\n        }),\r\n        shape3: button(() => {\r\n            morph(2)\r\n            // particles.morph2()\r\n        }),\r\n        shape4: button(() => {\r\n            morph(3)\r\n            // particles.morph2()\r\n        }),\r\n    })\r\n   \r\n    particles.material = new THREE.ShaderMaterial({\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader,\r\n        blending: THREE.AdditiveBlending,\r\n        depthWrite: false,\r\n        uniforms:\r\n        {\r\n            uSize: { value: 0.2},\r\n            uResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\r\n            uProgress: { value: controls.progress },\r\n            uColorA: new THREE.Uniform(new THREE.Color(controls.colorA)),\r\n            uColorB: new THREE.Uniform(new THREE.Color(controls.colorB)),\r\n        }\r\n    })\r\n    useFrame(() => {\r\n        sizes.width = window.innerWidth;\r\n        sizes.height = window.innerHeight;\r\n        particles.material.uniforms.uResolution.value.set(sizes.width, sizes.height);\r\n    })\r\n\r\n\r\n    const model = useGLTF('models/models.glb')\r\n    const positions = model.scene.children.map(child => child.geometry.attributes.position)\r\n    console.log(positions);\r\n    particles.maxCount = 0\r\n    particles.index = 0\r\n\r\n    for (const position of positions) {\r\n        if (position.count > particles.maxCount)\r\n            particles.maxCount = position.count\r\n    }\r\n    particles.positions = []\r\n    for (const position of positions) {\r\n        const originalArray = position.array\r\n        const newArray = new Float32Array(particles.maxCount * 3)\r\n\r\n        for (let i = 0; i < particles.maxCount; i++) {\r\n            const i3 = i * 3;\r\n            if (i3 < originalArray.length) {\r\n                newArray[i3] = originalArray[i3]\r\n                newArray[i3 + 1] = originalArray[i3 + 1]\r\n                newArray[i3 + 2] = originalArray[i3 + 2]\r\n            } else {\r\n                const randomIndex = Math.floor(position.count * Math.random()) * 3\r\n                newArray[i3] = originalArray[randomIndex]\r\n                newArray[i3 + 1] = originalArray[randomIndex + 1]\r\n                newArray[i3 + 2] = originalArray[randomIndex + 2]\r\n            }\r\n        }\r\n        particles.positions.push(new THREE.Float32BufferAttribute(newArray, 3))\r\n    }\r\n    const sizesArray = new Float32Array(particles.maxCount)\r\n    \r\n    for (let i = 0; i < particles.maxCount; i++) {\r\n        sizesArray[i] = Math.random()\r\n        \r\n    }\r\n    particles.geometry = new THREE.BufferGeometry()\r\n    particles.geometry.setAttribute('position', particles.positions[particles.index])\r\n    particles.geometry.setAttribute('aPositionTarget', particles.positions[3])\r\n    particles.geometry.setAttribute('aSize', new THREE.BufferAttribute(sizesArray, 1))\r\n    // particles.positionsArray = new Float32Array(particles.maxCount * 3)\r\n    // particles.sizesArray = new Float32Array(particles.maxCount)\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <points material={particles.material} geometry={particles.geometry}>\r\n            </points>\r\n            {/* <Suspense fallback={<Placeholder position-y={0.5} scale={[2, 3, 2]} />}>\r\n                <ExampleModel position-z={0} position-y={-1} scale={0.5}></ExampleModel>\r\n            </Suspense> */}\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["vertex_default","fragment_default","ParticlesMorphing","args","morph","index","particles","gsap","sizes","controls","useControls","button","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.AdditiveBlending","THREE.Vector2","THREE.Uniform","THREE.Color","useFrame","positions","useGLTF","child","position","originalArray","newArray","i","i3","randomIndex","THREE.Float32BufferAttribute","sizesArray","THREE.BufferGeometry","THREE.BufferAttribute","jsx","Fragment"],"mappings":"gaA,SAAwBC,EAAkBC,EAAM,CAGtC,MAAAC,EAASC,GAAU,CAErB,QAAQ,IAAIA,CAAK,EAEjBC,EAAU,SAAS,WAAW,SAAWA,EAAU,UAAUA,EAAU,KAAK,EAC5EA,EAAU,SAAS,WAAW,gBAAkBA,EAAU,UAAUD,CAAK,EAEpEE,EAAA,OACDD,EAAU,SAAS,SAAS,UAC5B,CAAE,MAAO,CAAE,EACX,CAAE,MAAO,EAAG,SAAU,EAAG,KAAM,QAAS,CAC5C,EACAA,EAAU,MAAQD,CACtB,EAGMG,EAAQ,CACV,MAAO,OAAO,WACd,OAAQ,OAAO,WACnB,EACMF,EAAY,CAAC,EAKbG,EAAWC,EAAY,CACzB,SAAU,CAAE,MAAO,EAAG,IAAK,EAAG,IAAK,CAAE,EACrC,OAAQ,CAAE,MAAO,SAAU,EAC3B,OAAQ,CAAE,MAAO,SAAU,EAC3B,OAAQC,EAAO,IAAM,CACjBP,EAAM,CAAC,CAAA,CAEV,EACD,OAAQO,EAAO,IAAM,CACjBP,EAAM,CAAC,CAAA,CAEV,EACD,OAAQO,EAAO,IAAM,CACjBP,EAAM,CAAC,CAAA,CAEV,EACD,OAAQO,EAAO,IAAM,CACjBP,EAAM,CAAC,CAEV,CAAA,CAAA,CACJ,EAESE,EAAA,SAAW,IAAIM,EAAqB,CAAA,aAC1CC,EAAA,eACAC,EACA,SAAUC,EACV,WAAY,GACZ,SACA,CACI,MAAO,CAAE,MAAO,EAAG,EACnB,YAAa,CAAE,MAAO,IAAIC,EAAc,OAAO,WAAY,OAAO,WAAW,CAAE,EAC/E,UAAW,CAAE,MAAOP,EAAS,QAAS,EACtC,QAAS,IAAIQ,EAAc,IAAIC,EAAYT,EAAS,MAAM,CAAC,EAC3D,QAAS,IAAIQ,EAAc,IAAIC,EAAYT,EAAS,MAAM,CAAC,CAAA,CAC/D,CACH,EACDU,EAAS,IAAM,CACXX,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YACZF,EAAA,SAAS,SAAS,YAAY,MAAM,IAAIE,EAAM,MAAOA,EAAM,MAAM,CAAA,CAC9E,EAIK,MAAAY,EADQC,EAAQ,mBAAmB,EACjB,MAAM,SAAS,IAAaC,GAAAA,EAAM,SAAS,WAAW,QAAQ,EACtF,QAAQ,IAAIF,CAAS,EACrBd,EAAU,SAAW,EACrBA,EAAU,MAAQ,EAElB,UAAWiB,KAAYH,EACfG,EAAS,MAAQjB,EAAU,WAC3BA,EAAU,SAAWiB,EAAS,OAEtCjB,EAAU,UAAY,CAAC,EACvB,UAAWiB,KAAYH,EAAW,CAC9B,MAAMI,EAAgBD,EAAS,MACzBE,EAAW,IAAI,aAAanB,EAAU,SAAW,CAAC,EAExD,QAASoB,EAAI,EAAGA,EAAIpB,EAAU,SAAUoB,IAAK,CACzC,MAAMC,EAAKD,EAAI,EACX,GAAAC,EAAKH,EAAc,OACVC,EAAAE,CAAE,EAAIH,EAAcG,CAAE,EAC/BF,EAASE,EAAK,CAAC,EAAIH,EAAcG,EAAK,CAAC,EACvCF,EAASE,EAAK,CAAC,EAAIH,EAAcG,EAAK,CAAC,MACpC,CACG,MAAAC,EAAc,KAAK,MAAML,EAAS,MAAQ,KAAK,OAAQ,CAAA,EAAI,EACxDE,EAAAE,CAAE,EAAIH,EAAcI,CAAW,EACxCH,EAASE,EAAK,CAAC,EAAIH,EAAcI,EAAc,CAAC,EAChDH,EAASE,EAAK,CAAC,EAAIH,EAAcI,EAAc,CAAC,CAAA,CACpD,CAEJtB,EAAU,UAAU,KAAK,IAAIuB,EAA6BJ,EAAU,CAAC,CAAC,CAAA,CAE1E,MAAMK,EAAa,IAAI,aAAaxB,EAAU,QAAQ,EAEtD,QAASoB,EAAI,EAAGA,EAAIpB,EAAU,SAAUoB,IACzBI,EAAAJ,CAAC,EAAI,KAAK,OAAO,EAGtB,OAAApB,EAAA,SAAW,IAAIyB,EACzBzB,EAAU,SAAS,aAAa,WAAYA,EAAU,UAAUA,EAAU,KAAK,CAAC,EAChFA,EAAU,SAAS,aAAa,kBAAmBA,EAAU,UAAU,CAAC,CAAC,EAC/DA,EAAA,SAAS,aAAa,QAAS,IAAI0B,EAAsBF,EAAY,CAAC,CAAC,EAQ7EG,EAAA,IAAAC,EAAA,SAAA,CACI,eAAC,SAAO,CAAA,SAAU5B,EAAU,SAAU,SAAUA,EAAU,QAAA,CAC1D,CAIJ,CAAA,CAER"}