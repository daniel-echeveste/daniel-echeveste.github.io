{"version":3,"file":"shader-CjK1iC7D.js","sources":["../../src/shaders/galaxy/vertex.glsl","../../src/shaders/galaxy/fragment.glsl","../../src/shaders/galaxy/shader.jsx"],"sourcesContent":["uniform float uSize;\r\nuniform float uTime;\r\nuniform float uSpeed;\r\n\r\nattribute float aScale;\r\nattribute vec3 aRandomness;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n\r\n    //position\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n\r\n    //spin\r\n    float angle = atan(modelPosition.x, modelPosition.z);\r\n    float distanceToCenter = length(modelPosition.xz);\r\n    float angleOffset = (1.0 / distanceToCenter) * uTime * 0.2 * uSpeed;\r\n    angle += angleOffset;\r\n\r\n    modelPosition.x = cos(angle) * distanceToCenter;\r\n    modelPosition.z = sin(angle) * distanceToCenter;\r\n\r\n    //Randomness\r\n\r\n    modelPosition.xyz += aRandomness;\r\n    \r\n\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectedPosition = projectionMatrix * viewPosition;\r\n    gl_Position = projectedPosition;\r\n\r\n    //Size\r\n    gl_PointSize = uSize * aScale;\r\n    gl_PointSize *= (1.0 / -viewPosition.z);\r\n\r\n    vColor = color;\r\n    // vUv = uv;\r\n    // vElevation = elevation;\r\n}","uniform vec3 uDepthColor;\r\nuniform vec3 uSurfaceColor;\r\nuniform float uColorOffset;\r\nuniform float uColorMultiplier;\r\nuniform sampler2D uTexture;\r\n\r\nvarying vec2 vUv;\r\nvarying float vElevation;\r\nvarying vec3 vColor; \r\n\r\nvoid main() {\r\n    \r\n    //disc\r\n    // float strength = distance(gl_PointCoord, vec2(0.5));\r\n    // strength = step(0.5, strength);\r\n    // strength = 1.0 - strength;\r\n\r\n    //difuse point\r\n    // float strength = distance(gl_PointCoord, vec2(0.5));\r\n    // strength *= 2.0;\r\n    // strength = 1.0-strength;\r\n\r\n    //Light point\r\n    float strength = distance(gl_PointCoord, vec2(0.5));\r\n    strength = 1.0-strength;\r\n    strength = pow(strength,8.5);\r\n\r\n    //color \r\n    vec3 color = mix(vec3(0.0), vColor, strength);\r\n    gl_FragColor = vec4(vec3(color), 1.0);\r\n    #include <colorspace_fragment>\r\n}","// CustomShaderMaterial.js\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls, Float, Text, useGLTF, shaderMaterial } from '@react-three/drei'\r\nimport { useMemo, useState, useRef } from 'react'\r\nimport { useFrame, extend, useThree } from '@react-three/fiber'\r\nimport { useControls } from \"leva\";\r\nimport testVertexShader from './vertex.glsl'\r\nimport testFragmentShader from './fragment.glsl'\r\nimport { Environment } from \"@react-three/drei\";\r\n\r\n\r\n\r\n\r\nexport default function Galaxy() {\r\n    \r\n    const { gl, camera } = useThree()\r\n    const [introTime] = useState(() => performance.now() / 1000)\r\n    const mesh = useRef()\r\n    const controls = useControls({\r\n        uSize:\r\n        {\r\n            value: 0.2,\r\n            min: 0,\r\n            max: 50,\r\n            step: 1\r\n        },\r\n        count: {\r\n            value: 900000,\r\n            min: 0,\r\n            max:    1800000,\r\n            step: 100\r\n        },\r\n        radius: {\r\n            value: 5,\r\n            min: -100,\r\n            max: 100,\r\n            step: 0.15\r\n        },\r\n        branches: {\r\n            value: 4,\r\n            min: -10,\r\n            max: 10,\r\n            step: 1\r\n        },\r\n        randomness: {\r\n            value: 0.5,\r\n            min: -10,\r\n            max: 10,\r\n            step: 0.5\r\n        },\r\n        randomnessPower: {\r\n            value: 3,\r\n            min: -10,\r\n            max: 10,\r\n            step: 0.5\r\n        },\r\n        insideColor: '#ff6030',\r\n        outsideColor: '#1b3984',\r\n        rotateX: {\r\n            value: 0,\r\n            min: -2,\r\n            max: 2,\r\n            step: 0.01\r\n        },\r\n        rotateY: {\r\n            value: 0,\r\n            min: -2,\r\n            max: 2,\r\n            step: 0.01\r\n        },\r\n        rotateZ: {\r\n            value: 0,\r\n            min: -2,\r\n            max: 2,\r\n            step: 0.01\r\n        },\r\n        speed: {\r\n            value: 1,\r\n            min: -5,\r\n            max: 10,\r\n            step: 0.01\r\n        },\r\n    })\r\n    \r\n   \r\n    document.body.style.backgroundColor = \"#000000\"    \r\n    useFrame((state, delta) => {\r\n        \r\n        shaderMaterial.uniforms.uTime.value = state.clock.elapsedTime - introTime;\r\n        console.log( introTime);\r\n        \r\n    })\r\n    useState(()=>{\r\n        // shaderMaterial.uniforms.uTime.value = 0;\r\n    },[]) \r\n\r\n\r\n\r\n    let geometry = null\r\n\r\n    /**\r\n     * Geometry\r\n     */\r\n    geometry = new THREE.BufferGeometry()\r\n\r\n    const positions = new Float32Array(controls.count * 3)\r\n    const colors = new Float32Array(controls.count * 3)\r\n    const scale = new Float32Array(controls.count * 1)\r\n    const randomness = new Float32Array(controls.count * 3)\r\n\r\n\r\n    const insideColor = new THREE.Color(controls.insideColor)\r\n    const outsideColor = new THREE.Color(controls.outsideColor)\r\n\r\n    for (let i = 0; i < controls.count; i++) {\r\n        const i3 = i * 3\r\n\r\n        // Position\r\n        const radius = Math.random() * controls.radius\r\n\r\n        const branchAngle = (i % controls.branches) / controls.branches * Math.PI * 2\r\n\r\n        positions[i3] = Math.cos(branchAngle) * radius\r\n        positions[i3 + 1] = 0\r\n        positions[i3 + 2] = Math.sin(branchAngle) * radius\r\n\r\n        //randomness\r\n        const randomX = Math.pow(Math.random(), controls.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * controls.randomness * radius\r\n        const randomY = Math.pow(Math.random(), controls.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * controls.randomness * radius\r\n        const randomZ = Math.pow(Math.random(), controls.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * controls.randomness * radius\r\n\r\n        randomness[i3 + 0] = randomX\r\n        randomness[i3 + 1] = randomY\r\n        randomness[i3 + 2] = randomZ\r\n\r\n\r\n        // Color\r\n        const mixedColor = insideColor.clone()\r\n        mixedColor.lerp(outsideColor, radius / controls.radius)\r\n\r\n        colors[i3] = mixedColor.r\r\n        colors[i3 + 1] = mixedColor.g\r\n        colors[i3 + 2] = mixedColor.b\r\n\r\n        //scale \r\n        scale[i] = Math.random()\r\n    }\r\n\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\r\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\r\n    geometry.setAttribute('aScale', new THREE.BufferAttribute(scale, 1))\r\n    geometry.setAttribute('aRandomness', new THREE.BufferAttribute(randomness, 3))\r\n\r\n    const shaderMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: testVertexShader,\r\n        fragmentShader: testFragmentShader,\r\n        depthWrite: false,\r\n        side: THREE.DoubleSide,\r\n        blending: THREE.AdditiveBlending,\r\n        vertexColors: true,\r\n        uniforms:\r\n        {\r\n            uTime: { value: 0 },\r\n            uSize: { value: 15 },\r\n            uSpeed: { value: controls.speed * 2 },\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Points\r\n     */\r\n    // points = new THREE.Points(geometry, material)\r\n    return <>\r\n       \r\n        <points\r\n            geometry={geometry}\r\n            material={shaderMaterial}\r\n            useRef={mesh}\r\n            scale={new THREE.Vector3(2, 2, 2)}\r\n            position={[0, 0, 0]}\r\n            rotation={[controls.rotateX, controls.rotateY, controls.rotateZ]}>\r\n\r\n        </points>\r\n        <Environment\r\n                      backgroundBlurriness={0}\r\n                        files={\"textures/sun/stars.jpg\"}\r\n                        background  \r\n                        encoding={THREE.sRGBEncoding}\r\n                      ></Environment>\r\n        {/* <shaderMaterial attach=\"material\" ref={material} /> */}\r\n    </>\r\n}\r\n\r\n\r\n"],"names":["vertex_default","fragment_default","Galaxy","useThree","introTime","useState","mesh","useRef","controls","useControls","useFrame","state","delta","shaderMaterial","geometry","THREE.BufferGeometry","positions","colors","scale","randomness","insideColor","THREE.Color","outsideColor","i","i3","radius","branchAngle","randomX","randomY","randomZ","mixedColor","THREE.BufferAttribute","THREE.ShaderMaterial","testVertexShader","testFragmentShader","THREE.DoubleSide","THREE.AdditiveBlending","jsxs","Fragment","jsx","THREE.Vector3","Environment","THREE.sRGBEncoding"],"mappings":"4HAAA,IAAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCaA,SAAwBC,GAAS,CAENC,EAAS,EAC1B,KAAA,CAACC,CAAS,EAAIC,EAAA,SAAS,IAAM,YAAY,MAAQ,GAAI,EACrDC,EAAOC,EAAAA,OAAO,EACdC,EAAWC,EAAY,CACzB,MACA,CACI,MAAO,GACP,IAAK,EACL,IAAK,GACL,KAAM,CACV,EACA,MAAO,CACH,MAAO,IACP,IAAK,EACL,IAAQ,KACR,KAAM,GACV,EACA,OAAQ,CACJ,MAAO,EACP,IAAK,KACL,IAAK,IACL,KAAM,GACV,EACA,SAAU,CACN,MAAO,EACP,IAAK,IACL,IAAK,GACL,KAAM,CACV,EACA,WAAY,CACR,MAAO,GACP,IAAK,IACL,IAAK,GACL,KAAM,EACV,EACA,gBAAiB,CACb,MAAO,EACP,IAAK,IACL,IAAK,GACL,KAAM,EACV,EACA,YAAa,UACb,aAAc,UACd,QAAS,CACL,MAAO,EACP,IAAK,GACL,IAAK,EACL,KAAM,GACV,EACA,QAAS,CACL,MAAO,EACP,IAAK,GACL,IAAK,EACL,KAAM,GACV,EACA,QAAS,CACL,MAAO,EACP,IAAK,GACL,IAAK,EACL,KAAM,GACV,EACA,MAAO,CACH,MAAO,EACP,IAAK,GACL,IAAK,GACL,KAAM,GAAA,CACV,CACH,EAGQ,SAAA,KAAK,MAAM,gBAAkB,UAC7BC,EAAA,CAACC,EAAOC,IAAU,CAEvBC,EAAe,SAAS,MAAM,MAAQF,EAAM,MAAM,YAAcP,EAChE,QAAQ,IAAKA,CAAS,CAAA,CAEzB,EACDC,EAAAA,SAAS,IAAI,CAEb,EAAE,EAAE,EAIJ,IAAIS,EAAW,KAKJA,EAAA,IAAIC,EAEf,MAAMC,EAAY,IAAI,aAAaR,EAAS,MAAQ,CAAC,EAC/CS,EAAS,IAAI,aAAaT,EAAS,MAAQ,CAAC,EAC5CU,EAAQ,IAAI,aAAaV,EAAS,MAAQ,CAAC,EAC3CW,EAAa,IAAI,aAAaX,EAAS,MAAQ,CAAC,EAGhDY,EAAc,IAAIC,EAAYb,EAAS,WAAW,EAClDc,EAAe,IAAID,EAAYb,EAAS,YAAY,EAE1D,QAASe,EAAI,EAAGA,EAAIf,EAAS,MAAOe,IAAK,CACrC,MAAMC,EAAKD,EAAI,EAGTE,EAAS,KAAK,OAAO,EAAIjB,EAAS,OAElCkB,EAAeH,EAAIf,EAAS,SAAYA,EAAS,SAAW,KAAK,GAAK,EAE5EQ,EAAUQ,CAAE,EAAI,KAAK,IAAIE,CAAW,EAAID,EAC9BT,EAAAQ,EAAK,CAAC,EAAI,EACpBR,EAAUQ,EAAK,CAAC,EAAI,KAAK,IAAIE,CAAW,EAAID,EAG5C,MAAME,EAAU,KAAK,IAAI,KAAK,SAAUnB,EAAS,eAAe,GAAK,KAAK,SAAW,GAAM,EAAI,IAAOA,EAAS,WAAaiB,EACtHG,EAAU,KAAK,IAAI,KAAK,SAAUpB,EAAS,eAAe,GAAK,KAAK,SAAW,GAAM,EAAI,IAAOA,EAAS,WAAaiB,EACtHI,EAAU,KAAK,IAAI,KAAK,SAAUrB,EAAS,eAAe,GAAK,KAAK,SAAW,GAAM,EAAI,IAAOA,EAAS,WAAaiB,EAEjHN,EAAAK,EAAK,CAAC,EAAIG,EACVR,EAAAK,EAAK,CAAC,EAAII,EACVT,EAAAK,EAAK,CAAC,EAAIK,EAIf,MAAAC,EAAaV,EAAY,MAAM,EACrCU,EAAW,KAAKR,EAAcG,EAASjB,EAAS,MAAM,EAE/CS,EAAAO,CAAE,EAAIM,EAAW,EACjBb,EAAAO,EAAK,CAAC,EAAIM,EAAW,EACrBb,EAAAO,EAAK,CAAC,EAAIM,EAAW,EAGtBZ,EAAAK,CAAC,EAAI,KAAK,OAAO,CAAA,CAG3BT,EAAS,aAAa,WAAY,IAAIiB,EAAsBf,EAAW,CAAC,CAAC,EACzEF,EAAS,aAAa,QAAS,IAAIiB,EAAsBd,EAAQ,CAAC,CAAC,EACnEH,EAAS,aAAa,SAAU,IAAIiB,EAAsBb,EAAO,CAAC,CAAC,EACnEJ,EAAS,aAAa,cAAe,IAAIiB,EAAsBZ,EAAY,CAAC,CAAC,EAEvEN,MAAAA,EAAiB,IAAImB,EAAqB,CAC5C,aAAcC,EACd,eAAgBC,EAChB,WAAY,GACZ,KAAMC,EACN,SAAUC,EACV,aAAc,GACd,SACA,CACI,MAAO,CAAE,MAAO,CAAE,EAClB,MAAO,CAAE,MAAO,EAAG,EACnB,OAAQ,CAAE,MAAO5B,EAAS,MAAQ,CAAE,CAAA,CACxC,CACH,EAMD,OAEI6B,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAAC,SAAA,CACG,SAAAzB,EACA,SAAUD,EACV,OAAQP,EACR,MAAO,IAAIkC,EAAc,EAAG,EAAG,CAAC,EAChC,SAAU,CAAC,EAAG,EAAG,CAAC,EAClB,SAAU,CAAChC,EAAS,QAASA,EAAS,QAASA,EAAS,OAAO,CAAA,CAEnE,EACA+B,EAAA,IAACE,EAAA,CACa,qBAAsB,EACpB,MAAO,yBACP,WAAU,GACV,SAAUC,MAAM,CAAA,CACjB,EAEnB,CACJ"}