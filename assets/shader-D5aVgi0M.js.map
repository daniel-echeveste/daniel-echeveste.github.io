{"version":3,"file":"shader-D5aVgi0M.js","sources":["../../src/shaders/fireworks/fragment.glsl","../../src/shaders/fireworks/vertex.glsl","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/shaders/fireworks/shader.jsx"],"sourcesContent":["uniform sampler2D uTexture;\r\nuniform vec3 uColor ;\r\nvoid main()\r\n{\r\n    float textureAlpha = texture(uTexture, gl_PointCoord).r;\r\n    vec4 textureColor = texture(uTexture, gl_PointCoord);\r\n\r\n    //final color \r\n    gl_FragColor = vec4(uColor, textureAlpha);\r\n    // gl_FragColor = textureColor;\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>\r\n}","\r\nuniform float uSize;\r\nuniform vec2 uResolution;\r\nuniform float uProgress;\r\n\r\nattribute float aSize;\r\nattribute float aTimeMultiplayer;\r\nfloat remap(float value, float originMin, float originMax, float destinationMin, float destinationMax)\r\n{\r\n    return destinationMin + (value - originMin) * (destinationMax - destinationMin) / (originMax - originMin);\r\n}\r\n\r\nvoid main(){\r\n    float progress = uProgress * aTimeMultiplayer;\r\n    vec3 newPosition = position;\r\n    \r\n    //explosion\r\n    float explodingProgress = remap(progress, 0.0, 1.0, 0.0, 1.5);\r\n    explodingProgress = clamp(explodingProgress, 0.0, 1.0);\r\n    explodingProgress = 1.0 - pow(1.0 - explodingProgress, 3.0);\r\n    newPosition *= explodingProgress;\r\n\r\n    //falling \r\n    float fallingProgress = remap(progress, 0.1, 1.0, 0.0, 1.0);\r\n    fallingProgress = clamp(fallingProgress, 0.0, 1.0);\r\n    fallingProgress = 1.0 - pow(1.0 - fallingProgress, 3.0);\r\n    newPosition.y -= fallingProgress * 0.3;\r\n\r\n    //scale \r\n    float sizeOpeningProgress = remap(progress, 0.0, 0.125,0.0,1.0);\r\n    float sizeClosingProgress = remap(progress,0.125, 1.125,1.0, 0.0);         \r\n    float sizeProgress = min(sizeOpeningProgress, sizeClosingProgress);\r\n\r\n    //twinkling \r\n    float twinklingProgress = remap(progress, 0.0, 0.125,0.0,1.0);\r\n    twinklingProgress= clamp(twinklingProgress, 0.0, 1.0);\r\n    float sizeTwinkling = sin(progress * 30.0) * 0.5 + 0.5; \r\n    sizeTwinkling = 1.0 - sizeTwinkling * twinklingProgress;\r\n\r\n    //final position \r\n    vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0) ;\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    gl_Position = projectionMatrix * viewPosition;\r\n\r\n    // Final size\r\n    gl_PointSize = uSize * uResolution.y * aSize * sizeProgress * sizeTwinkling;\r\n    gl_PointSize *= 1.0 / -viewPosition.z; //perspective\r\n    \r\n    if(gl_PointSize<1.0)\r\n        gl_Position= vec4(9999.9);\r\n}","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import * as THREE from \"three\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport vertexShader from \"./vertex.glsl\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport gsap from \"gsap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Sky } from \"@react-three/drei\";\r\n\r\n\r\nexport default function Fireworks() {\r\n  let fireworkCounter = 1\r\n  const [fireworks, setFireworks] = useState([]);\r\n  const { camera } = useThree();\r\n \r\n  const textureLoader = new THREE.TextureLoader();\r\n  useEffect(() => {\r\n  const handleClick = () => {\r\n    setFireworks([]); // clear previous fireworks\r\n    for(let i=0; i<fireworkCounter; i++){\r\n      createRandomFirework();\r\n    }\r\n    fireworkCounter *=2;\r\n    if(fireworkCounter == 40)fireworkCounter = 0\r\n  };\r\n\r\n  window.addEventListener(\"click\", handleClick);\r\n\r\n  return () => {\r\n    window.removeEventListener(\"click\", handleClick); // cleanup\r\n  }; \r\n}, []);\r\n  const textures = [\r\n    textureLoader.load(\"./textures/particles/1.png\"),\r\n    textureLoader.load(\"./textures/particles/2.png\"),\r\n    textureLoader.load(\"./textures/particles/3.png\"),\r\n    textureLoader.load(\"./textures/particles/4.png\"),\r\n    textureLoader.load(\"./textures/particles/5.png\"),\r\n    textureLoader.load(\"./textures/particles/6.png\"),\r\n    textureLoader.load(\"./textures/particles/7.png\"),\r\n    textureLoader.load(\"./textures/particles/8.png\"),\r\n  ];\r\n  const createFirework = (count, position, size, texture, radius, color) => {\r\n    const positions = new Float32Array(count * 3);\r\n    const sizesArray = new Float32Array(count);\r\n    const timeMultiplayersArray = new Float32Array(count);\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const i3 = i * 3;\r\n\r\n      const spherical = new THREE.Spherical(\r\n        radius * (0.75 + Math.random() * 0.25),\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI * 2\r\n      );\r\n      const position = new THREE.Vector3();\r\n      position.setFromSpherical(spherical);\r\n      positions[i3] = position.x;\r\n      positions[i3 + 1] = position.y;\r\n      positions[i3 + 2] = position.z;\r\n\r\n      sizesArray[i] = Math.random();\r\n\r\n      timeMultiplayersArray[i] = 1 + Math.random();\r\n    }\r\n\r\n    //material\r\n    // texture.flipY = false\r\n    const material = new THREE.ShaderMaterial({\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n      transparent: true,\r\n      depthFunc: false,\r\n      blending: THREE.AdditiveBlending,\r\n      uniforms: {\r\n        uSize: new THREE.Uniform(size),\r\n        uResolution: new THREE.Uniform(\r\n          new THREE.Vector2(window.innerWidth, window.innerHeight)\r\n        ),\r\n        uTexture: new THREE.Uniform(texture),\r\n        uColor: new THREE.Uniform(color),\r\n        uProgress: new THREE.Uniform(0),\r\n      },\r\n    });\r\n    //geometry\r\n    const geometry = new THREE.BufferGeometry();\r\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\r\n    geometry.setAttribute(\"aSize\", new THREE.BufferAttribute(sizesArray, 1));\r\n    geometry.setAttribute(\r\n      \"aTimeMultiplayer\",\r\n      new THREE.BufferAttribute(timeMultiplayersArray, 1)\r\n    );\r\n\r\n    const id = uuidv4();\r\n    setFireworks((prev) => [\r\n      ...prev,\r\n      { position, positions, sizesArray, material, geometry, id },\r\n    ]);\r\n\r\n    gsap.to(material.uniforms.uProgress, {\r\n      value: 1,\r\n      duration: 3,\r\n      ease: \"linear\",\r\n      onComplete: () => destroy(id),\r\n    });\r\n    const destroy = (id) => {\r\n      setFireworks((prev) => {\r\n        const fw = prev.find((fw) => fw.id === id);\r\n        if (fw) {\r\n          fw.material.dispose();\r\n          fw.geometry.dispose();\r\n        }\r\n        return prev.filter((fw) => fw.id !== id);\r\n      });\r\n    };\r\n  };\r\n  const createRandomFirework = () => {\r\n    console.log(fireworks);\r\n\r\n    const count = Math.round(400 + Math.random() * 3000);\r\n    const position = new THREE.Vector3(\r\n      (Math.random() - 0.5) * 8,\r\n     (Math.random() - 0.5) * 8,\r\n      (Math.random() - 0.5) * 8\r\n    );\r\n    const size = 0.1 + Math.random() * 0.1;\r\n    const texture = textures[Math.floor(Math.random() * textures.length)];\r\n    const radius = 0.5 + Math.random();\r\n    const color = new THREE.Color();\r\n    color.setHSL(Math.random(), 1, 0.7);\r\n    createFirework(count, position, size, texture, radius, color);\r\n  };\r\n  const sunsetSky =  \r\n    {\r\n        PositionX : 0, PositionY:  0.5, PositionZ:  0,\r\n        Azimuth:  0, Elevation: -2.2, Distance:  450000,\r\n        Inclination:  0.5, mieCoefficient:  0.005, mieDirectionalG:  0.95,\r\n        rayleigh:  3, turbidity: 10, Exposure: THREE.CineonToneMapping, \r\n    }\r\n  return (\r\n    <>\r\n      <Sky \r\n            inclination={sunsetSky.Inclination}\r\n            azimuth={sunsetSky.Azimuth}\r\n             distance={sunsetSky.Distance}\r\n             mieCoefficient = {sunsetSky.mieCoefficient}\r\n             mieDirectionalG = {sunsetSky.mieDirectionalG}\r\n             rayleigh = {sunsetSky.rayleigh}\r\n             turbidity = {sunsetSky.turbidity}\r\n             exposure = {sunsetSky.Exposure}\r\n        />\r\n      {fireworks.map((fw, idx) => (\r\n        <points\r\n          key={idx}\r\n          material={fw.material}\r\n          geometry={fw.geometry}\r\n          position={fw.position}\r\n        >\r\n          {/* <bufferGeometry >\r\n            <bufferAttribute\r\n              position={fw.position}\r\n              attach=\"attributes-position\"\r\n              array={fw.positions}\r\n              count={fw.positions.length / 3}\r\n              itemSize={3}\r\n            />\r\n            <bufferAttribute\r\n              attach=\"attributes-aSize\"\r\n              array={fw.sizesArray}\r\n              count={fw.sizesArray.length}\r\n              itemSize={1}\r\n            />\r\n          </bufferGeometry> */}\r\n          {/* <pointsMaterial color=\"orange\" size={0.05} /> */}\r\n        </points>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n"],"names":["fragment_default","vertex_default","byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","v4","options","buf","rnds","Fireworks","fireworkCounter","fireworks","setFireworks","useState","useThree","textureLoader","THREE.TextureLoader","useEffect","handleClick","createRandomFirework","textures","createFirework","count","position","size","texture","radius","color","positions","sizesArray","timeMultiplayersArray","i3","spherical","THREE.Spherical","THREE.Vector3","material","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.AdditiveBlending","THREE.Uniform","THREE.Vector2","geometry","THREE.BufferGeometry","THREE.BufferAttribute","id","uuidv4","prev","gsap","destroy","fw","THREE.Color","sunsetSky","THREE.CineonToneMapping","jsxs","Fragment","jsx","Sky","idx"],"mappings":"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","x_google_ignoreList":[2,3,4,5]}