{"version":3,"file":"shader-CtWR2mAb.js","sources":["../../src/shaders/cursorAnimation/vertex.glsl","../../src/shaders/cursorAnimation/fragment.glsl","../../src/shaders/cursorAnimation/shader.jsx"],"sourcesContent":["uniform  vec2 uResolution;\r\nuniform sampler2D uPictureTexture;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main()\r\n{\r\n\r\n\r\n    \r\n    //final position \r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectedPosition = projectionMatrix * viewPosition;\r\n    gl_Position = projectedPosition;\r\n\r\n    //picture\r\n    float pictureIntensity = texture(uPictureTexture, uv).r;\r\n\r\n    //point size \r\n    gl_PointSize = 0.1 * pictureIntensity * uResolution.y;\r\n    gl_PointSize *= (1.0 / -viewPosition.z);\r\n\r\n\r\n\r\n    //color\r\n    vColor = vec3(pow(pictureIntensity, 2.0));\r\n}","\r\nvarying vec3 vColor;\r\nvoid main()\r\n{\r\n\r\n    vec2 uv = gl_PointCoord;\r\n    \r\n    float distanceToCenter = distance(uv, vec2(0.5));\r\n    if(distanceToCenter > 0.5)\r\n    {\r\n        discard;\r\n    }\r\n    gl_FragColor = vec4(vColor, 1.0);\r\n\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>   \r\n}","import vertexShader from \"./vertex.glsl\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport * as THREE from \"three\"\r\nimport { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { Environment } from \"@react-three/drei\";\r\nimport { useControls } from \"leva\";\r\nimport { text } from \"framer-motion/client\";\r\n\r\nexport default function Earth(args) {\r\n    \r\n   \r\n    document.body.style.backgroundColor = \"#000011\"\r\n   const sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n   }\r\n\r\n    const controls = useControls({\r\n\r\n    })\r\n\r\n    const textureLoader = new THREE.TextureLoader()\r\n    const pictureTexture = textureLoader.load('/textures/imgs/picture-1.png')\r\n\r\n    const particlesMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader,\r\n        uniforms:\r\n        {\r\n            uTime: {value: 0},\r\n            uResolution: new THREE.Uniform(new THREE.Vector2(sizes.width, sizes.height)),\r\n            uPictureTexture: new THREE.Uniform(pictureTexture)\r\n        }\r\n    })\r\n\r\n    useFrame(() => {\r\n        particlesMaterial.uniforms.uTime.value += 0.01;\r\n        sizes.width = window.innerWidth;\r\n        sizes.height = window.innerHeight;\r\n        particlesMaterial.uniforms.uResolution.value.set(sizes.width, sizes.height);\r\n    })\r\n\r\n    return (\r\n        <>\r\n           \r\n            <points material={particlesMaterial}>\r\n                <planeGeometry args={[10,10,128, 128]} />\r\n               \r\n            </points>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["vertex_default","fragment_default","Earth","args","sizes","useControls","pictureTexture","THREE.TextureLoader","particlesMaterial","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.Uniform","THREE.Vector2","useFrame","jsx","Fragment"],"mappings":"kFAAA,IAAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCSA,SAAwBC,EAAMC,EAAM,CAGvB,SAAA,KAAK,MAAM,gBAAkB,UACvC,MAAMC,EAAQ,CACb,MAAO,OAAO,WACd,OAAQ,OAAO,WAChB,EAEkBC,EAAY,CAE5B,CAAA,EAGK,MAAAC,EADgB,IAAIC,EAAoB,EACT,KAAK,8BAA8B,EAElEC,EAAoB,IAAIC,EAAqB,CAAA,aAC/CC,EAAA,eACAC,EACA,SACA,CACI,MAAO,CAAC,MAAO,CAAC,EAChB,YAAa,IAAIC,EAAc,IAAIC,EAAcT,EAAM,MAAOA,EAAM,MAAM,CAAC,EAC3E,gBAAiB,IAAIQ,EAAcN,CAAc,CAAA,CACrD,CACH,EAED,OAAAQ,EAAS,IAAM,CACON,EAAA,SAAS,MAAM,OAAS,IAC1CJ,EAAM,MAAQ,OAAO,WACrBA,EAAM,OAAS,OAAO,YACtBI,EAAkB,SAAS,YAAY,MAAM,IAAIJ,EAAM,MAAOA,EAAM,MAAM,CAAA,CAC7E,EAKOW,EAAA,IAAAC,WAAA,CAAA,SAAAD,EAAAA,IAAC,SAAO,CAAA,SAAUP,EACd,SAACO,EAAAA,IAAA,gBAAA,CAAc,KAAM,CAAC,GAAG,GAAG,IAAK,GAAG,CAAA,CAAG,CAE3C,CAAA,EAEJ,CAER"}