{"version":3,"file":"shader-CYPM0RhY.js","sources":["../../src/shaders/halftone/vertex.glsl","../../src/shaders/halftone/fragment.glsl","../../src/shaders/halftone/shader.jsx"],"sourcesContent":["varying vec3 vNormal;\r\nvarying vec3 vPosition;\r\nvoid main(){\r\n     //position \r\n     vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n     gl_Position = projectionMatrix * viewMatrix * modelPosition;\r\n\r\n     //normal\r\n     vec3 modelNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\r\n\r\n     //varyings \r\n     vNormal =  modelNormal;\r\n     vPosition = modelPosition.xyz;\r\n}","uniform vec3 uColor;\r\nuniform vec2 uResolution;\r\nuniform float uRepetitions;\r\nuniform float uLow;\r\nuniform float uHigh;\r\nuniform vec3 uLightColor;\r\nuniform float uLightRepetitions;\r\nuniform vec3 uHalftoneColor;\r\nuniform vec3 uShadowDirection;\r\nuniform vec3 uLightDirection;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec3 vPosition;\r\n\r\n#include ../includes/ambientLight.glsl\r\n#include ../includes/directionalLight.glsl\r\n#include ../includes/halftone.glsl\r\n\r\nvoid main () {\r\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 color = uColor; \r\n\r\n    //light \r\n    vec3 light = vec3(0.0);\r\n    light += ambientLight(\r\n        vec3(1.0), //light color\r\n        0.8 //intensity\r\n    );\r\n    light += directionalLight(\r\n        vec3(1.0), //light color\r\n        0.8, //intensity\r\n        normal,\r\n        vec3(1.0, 1.0, 1.0), //direction\r\n        viewDirection,\r\n        1.0 // specular power\r\n        \r\n    );\r\n\r\n    color *= light;\r\n    //halftone\r\n    color = halftone(\r\n        color, \r\n        uRepetitions, \r\n        uShadowDirection,\r\n        uLow, uHigh,\r\n        uHalftoneColor,\r\n        normal\r\n    );\r\n    color = halftone(\r\n        color, \r\n        uRepetitions, \r\n        uLightDirection,\r\n        uLow, uHigh,\r\n        uLightColor,\r\n        normal\r\n    );\r\n    // final color \r\n    gl_FragColor = vec4(color,1.0);\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>\r\n}","\r\nimport { useRef } from \"react\";\r\nimport vertexShader from \"./vertex.glsl\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport * as THREE from \"three\"\r\nimport { useControls } from \"leva\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\n\r\nexport default function HalftoneShader() {\r\n\r\n    const sphereRef = useRef()\r\n    const torusKnotRef = useRef()\r\n    const cubeRef = useRef()\r\n\r\n    const controls = useControls({\r\n        uShapeColor: {value:\"#ff794d\"},\r\n        backgroundColor: {value:\"#26132f\"},\r\n        uHalftoneColor: {value:\"#8e19b8\"},\r\n        uRepetitions: {value:100, min:1, max:200, step:1},\r\n        uLow: {value:-0.8, min:-1, max:1, step:0.1},\r\n        uHigh: {value:1.5, min:0, max:2, step:0.1},\r\n        uShadowDirection: {value:new THREE.Vector3(0, -1, 0)},\r\n        uLightDirection: {value:new THREE.Vector3(1, 1, 0)},\r\n        uLightColor: {value:\"#ffffff\"},\r\n        uLightRepetitions: {value:100, min:0, max:10, step:0.1},\r\n    })\r\n    document.body.style.backgroundColor = controls.backgroundColor    \r\n   \r\n    const pixelRatio = Math.min(window.devicePixelRatio , 2)\r\n    const halftoneMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader,\r\n        uniforms: {\r\n            uColor :new THREE.Uniform(new THREE.Color(controls.uShapeColor)),\r\n            uResolution :new THREE.Uniform(new THREE.Vector2(window.innerWidth * pixelRatio, window.innerHeight * pixelRatio)),\r\n            uRepetitions :new THREE.Uniform(controls.uRepetitions),\r\n            uLow :new THREE.Uniform(controls.uLow),\r\n            uHigh :new THREE.Uniform(controls.uHigh),\r\n            uLightColor :new THREE.Uniform(new THREE.Color(controls.uLightColor)),\r\n            uLightRepetitions :new THREE.Uniform(controls.uLightRepetitions),\r\n            uHalftoneColor :new THREE.Uniform(new THREE.Color(controls.uHalftoneColor)),\r\n            uLightDirection :new THREE.Uniform(controls.uLightDirection),\r\n            uShadowDirection :new THREE.Uniform(controls.uShadowDirection),\r\n        }\r\n    })\r\n \r\n   useFrame(() => {\r\n    halftoneMaterial.uniforms.uResolution.value.set(window.innerWidth * pixelRatio, window.innerHeight * pixelRatio)\r\n    sphereRef.current.rotation.x += 0.02;\r\n    sphereRef.current.rotation.y += 0.01;\r\n    torusKnotRef.current.rotation.x -= 0.014;\r\n    torusKnotRef.current.rotation.y += 0.01;\r\n    cubeRef.current.rotation.x -= 0.015;\r\n    cubeRef.current.rotation.y -= 0.01;\r\n   })\r\n    return (\r\n        <>\r\n           <mesh ref={sphereRef} position={[-3, 0, 0]} material={halftoneMaterial}>\r\n                   <    torusGeometry /> \r\n               </mesh>\r\n               {/* torus knot */}\r\n               <mesh ref={torusKnotRef} position={[3, 0, 0]} material={halftoneMaterial}>\r\n                   <torusKnotGeometry  args={[1, 0.4, 128, 128]}/>\r\n                   \r\n               </mesh>\r\n               {/* box */}\r\n               <mesh ref={cubeRef} position={[0, 0, 0]} material={halftoneMaterial}>\r\n                   <boxGeometry />\r\n                 \r\n               </mesh>\r\n        </>\r\n    )\r\n\r\n\r\n}"],"names":["vertex_default","fragment_default","HalftoneShader","sphereRef","useRef","torusKnotRef","cubeRef","controls","useControls","THREE.Vector3","pixelRatio","halftoneMaterial","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.Uniform","THREE.Color","THREE.Vector2","useFrame","jsxs","Fragment","jsx"],"mappings":"gwBC,GAAiB,CAErC,MAAMC,EAAYC,EAAAA,OAAO,EACnBC,EAAeD,EAAAA,OAAO,EACtBE,EAAUF,EAAAA,OAAO,EAEjBG,EAAWC,EAAY,CACzB,YAAa,CAAC,MAAM,SAAS,EAC7B,gBAAiB,CAAC,MAAM,SAAS,EACjC,eAAgB,CAAC,MAAM,SAAS,EAChC,aAAc,CAAC,MAAM,IAAK,IAAI,EAAG,IAAI,IAAK,KAAK,CAAC,EAChD,KAAM,CAAC,MAAM,IAAM,IAAI,GAAI,IAAI,EAAG,KAAK,EAAG,EAC1C,MAAO,CAAC,MAAM,IAAK,IAAI,EAAG,IAAI,EAAG,KAAK,EAAG,EACzC,iBAAkB,CAAC,MAAM,IAAIC,EAAc,EAAG,GAAI,CAAC,CAAC,EACpD,gBAAiB,CAAC,MAAM,IAAIA,EAAc,EAAG,EAAG,CAAC,CAAC,EAClD,YAAa,CAAC,MAAM,SAAS,EAC7B,kBAAmB,CAAC,MAAM,IAAK,IAAI,EAAG,IAAI,GAAI,KAAK,EAAG,CAAA,CACzD,EACQ,SAAA,KAAK,MAAM,gBAAkBF,EAAS,gBAE/C,MAAMG,EAAa,KAAK,IAAI,OAAO,iBAAmB,CAAC,EACjDC,EAAmB,IAAIC,EAAqB,CAAA,aAC9CC,EAAA,eACAC,EACA,SAAU,CACN,OAAQ,IAAIC,EAAc,IAAIC,EAAYT,EAAS,WAAW,CAAC,EAC/D,YAAa,IAAIQ,EAAc,IAAIE,EAAc,OAAO,WAAaP,EAAY,OAAO,YAAcA,CAAU,CAAC,EACjH,aAAc,IAAIK,EAAcR,EAAS,YAAY,EACrD,KAAM,IAAIQ,EAAcR,EAAS,IAAI,EACrC,MAAO,IAAIQ,EAAcR,EAAS,KAAK,EACvC,YAAa,IAAIQ,EAAc,IAAIC,EAAYT,EAAS,WAAW,CAAC,EACpE,kBAAmB,IAAIQ,EAAcR,EAAS,iBAAiB,EAC/D,eAAgB,IAAIQ,EAAc,IAAIC,EAAYT,EAAS,cAAc,CAAC,EAC1E,gBAAiB,IAAIQ,EAAcR,EAAS,eAAe,EAC3D,iBAAkB,IAAIQ,EAAcR,EAAS,gBAAgB,CAAA,CACjE,CACH,EAEF,OAAAW,EAAS,IAAM,CACGP,EAAA,SAAS,YAAY,MAAM,IAAI,OAAO,WAAaD,EAAY,OAAO,YAAcA,CAAU,EACrGP,EAAA,QAAQ,SAAS,GAAK,IACtBA,EAAA,QAAQ,SAAS,GAAK,IACnBE,EAAA,QAAQ,SAAS,GAAK,KACtBA,EAAA,QAAQ,SAAS,GAAK,IAC3BC,EAAA,QAAQ,SAAS,GAAK,KACtBA,EAAA,QAAQ,SAAS,GAAK,GAAA,CAC9B,EAGOa,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAAC,OAAK,CAAA,IAAKlB,EAAW,SAAU,CAAC,GAAI,EAAG,CAAC,EAAG,SAAUQ,EAC9C,SAAAU,EAAAA,IAAK,iBAAc,CAAA,EACvB,EAEAA,EAAAA,IAAC,QAAK,IAAKhB,EAAc,SAAU,CAAC,EAAG,EAAG,CAAC,EAAG,SAAUM,EACpD,SAAAU,MAAC,qBAAmB,KAAM,CAAC,EAAG,GAAK,IAAK,GAAG,CAAE,CAAA,EAEjD,EAECA,EAAA,IAAA,OAAA,CAAK,IAAKf,EAAS,SAAU,CAAC,EAAG,EAAG,CAAC,EAAG,SAAUK,EAC/C,SAAAU,EAAAA,IAAC,gBAAY,CAEjB,CAAA,CAAA,EACP,CAIR"}