{"version":3,"file":"shader-UX211fYP.js","sources":["../../src/shaders/patterns/vertex.glsl","../../src/shaders/patterns/fragment.glsl","../../src/shaders/patterns/shader.jsx"],"sourcesContent":["varying vec2 vUv;\r\n\r\nvoid main() {\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n\r\n    vUv = uv;\r\n}","#define PI 3.1415926535897932384626433832795\r\n\r\nvarying vec2 vUv;\r\n\r\nuniform int uPattern;\r\n\r\nfloat random(vec2 st) {\r\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\r\n}\r\n\r\nvec2 rotate(vec2 uv, float rotation, vec2 mid) {\r\n    return vec2(cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x, cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y);\r\n}\r\n\r\n//\tClassic Perlin 2D Noise \r\n//\tby Stefan Gustavson\r\n//\r\nvec4 permute(vec4 x) {\r\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\r\n}\r\n\r\nvec2 fade(vec2 t) {\r\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\r\n}\r\n\r\nfloat cnoise(vec2 P) {\r\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\r\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\r\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\r\n    vec4 ix = Pi.xzxz;\r\n    vec4 iy = Pi.yyww;\r\n    vec4 fx = Pf.xzxz;\r\n    vec4 fy = Pf.yyww;\r\n    vec4 i = permute(permute(ix) + iy);\r\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\r\n    vec4 gy = abs(gx) - 0.5;\r\n    vec4 tx = floor(gx + 0.5);\r\n    gx = gx - tx;\r\n    vec2 g00 = vec2(gx.x, gy.x);\r\n    vec2 g10 = vec2(gx.y, gy.y);\r\n    vec2 g01 = vec2(gx.z, gy.z);\r\n    vec2 g11 = vec2(gx.w, gy.w);\r\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\r\n    g00 *= norm.x;\r\n    g01 *= norm.y;\r\n    g10 *= norm.z;\r\n    g11 *= norm.w;\r\n    float n00 = dot(g00, vec2(fx.x, fy.x));\r\n    float n10 = dot(g10, vec2(fx.y, fy.y));\r\n    float n01 = dot(g01, vec2(fx.z, fy.z));\r\n    float n11 = dot(g11, vec2(fx.w, fy.w));\r\n    vec2 fade_xy = fade(Pf.xy);\r\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\r\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\r\n    return 2.3 * n_xy;\r\n}\r\n\r\nvoid main() {\r\n    float strength = 0.0;\r\n    float barX;\r\n    float barY;\r\n    vec2 gridUv;\r\n    vec2 wavedUv;\r\n    float angle;\r\n    switch(uPattern) {\r\n        case 1:\r\n            gl_FragColor = vec4(vUv, 1.0, 1.0); // red\r\n            break;\r\n        case 2:\r\n            gl_FragColor = vec4(vUv, 0.0, 1.0); // green\r\n            break;\r\n        case 3:\r\n            strength = vUv.x; // blue\r\n            break;\r\n        case 4:\r\n            gl_FragColor = vec4(vUv, 1.0, 1.0); // red\r\n            break;\r\n        case 5:\r\n            // Pattern 5\r\n            strength = 1.0 - vUv.y;\r\n            break;\r\n        case 6:\r\n          // Pattern 6\r\n            strength = vUv.y * 10.0;\r\n            break;\r\n        case 7:\r\n            // Pattern 7\r\n            strength = mod(vUv.y * 10.0, 1.0);\r\n            break;\r\n        case 8:\r\n             // Pattern 8\r\n            strength = mod(vUv.y * 10.0, 1.0);\r\n            strength = step(0.5, strength);\r\n            break;\r\n        case 9:\r\n            // Pattern 9\r\n            strength = mod(vUv.y * 10.0, 1.0);\r\n            strength = step(0.8, strength);\r\n            break;\r\n        case 10:\r\n            // Pattern 10\r\n            strength = mod(vUv.x * 10.0, 1.0);\r\n            strength = step(0.8, strength);\r\n            break;\r\n        case 11:\r\n             // Pattern 11\r\n            strength = step(0.8, mod(vUv.x * 10.0, 1.0));\r\n            strength += step(0.8, mod(vUv.y * 10.0, 1.0));\r\n            strength = clamp(strength, 0.0, 1.0);\r\n            break;\r\n        case 12:\r\n            // Pattern 12\r\n            strength = step(0.8, mod(vUv.x * 10.0, 1.0));\r\n            strength *= step(0.8, mod(vUv.y * 10.0, 1.0));\r\n            break;\r\n        case 13:\r\n            // Pattern 13\r\n            strength = step(0.4, mod(vUv.x * 10.0, 1.0));\r\n            strength *= step(0.8, mod(vUv.y * 10.0, 1.0));\r\n            break;\r\n        case 14:\r\n            // Pattern 14\r\n            barX = step(0.4, mod(vUv.x * 10.0, 1.0)) * step(0.8, mod(vUv.y * 10.0, 1.0));\r\n            barY = step(0.8, mod(vUv.x * 10.0, 1.0)) * step(0.4, mod(vUv.y * 10.0, 1.0));\r\n            strength = barX + barY;\r\n            strength = clamp(strength, 0.0, 1.0);\r\n            break;\r\n        case 15:\r\n             // Pattern 15\r\n            barX = step(0.4, mod(vUv.x * 10.0 - 0.2, 1.0)) * step(0.8, mod(vUv.y * 10.0, 1.0));\r\n            barY = step(0.8, mod(vUv.x * 10.0, 1.0)) * step(0.4, mod(vUv.y * 10.0 - 0.2, 1.0));\r\n            strength = barX + barY;\r\n            strength = clamp(strength, 0.0, 1.0);\r\n            break;\r\n        case 16:\r\n            // Pattern 16\r\n            strength = abs(vUv.x - 0.5);\r\n            break;\r\n        case 17:\r\n            // Pattern 17\r\n            strength = min(abs(vUv.x - 0.5), abs(vUv.y - 0.5));\r\n            break;\r\n        case 18:\r\n            // Pattern 18\r\n            strength = max(abs(vUv.x - 0.5), abs(vUv.y - 0.5));\r\n            break;\r\n        case 19:\r\n            // Pattern 19\r\n            strength = step(0.2, max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)));\r\n            break;\r\n        case 20:\r\n            // Pattern 20\r\n            strength = step(0.2, max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)));\r\n            strength *= 1.0 - step(0.25, max(abs(vUv.x - 0.5), abs(vUv.y - 0.5)));\r\n\r\n            break;\r\n        case 21:\r\n            // Pattern 21\r\n            strength = floor(vUv.x * 10.0) / 10.0;\r\n            break;\r\n        case 22:\r\n             // Pattern 22\r\n            strength = floor(vUv.x * 10.0) / 10.0 * floor(vUv.y * 10.0) / 10.0;\r\n\r\n            break;\r\n        case 23:\r\n        // Pattern 23\r\n            strength = random(vUv);\r\n            break;\r\n        case 24:\r\n             // Pattern 24\r\n            gridUv = vec2(floor(vUv.x * 10.0) / 10.0, floor(vUv.y * 10.0) / 10.0);\r\n            strength = random(gridUv);\r\n\r\n            break;\r\n        case 25:\r\n           // Pattern 25\r\n            gridUv = vec2(floor(vUv.x * 10.0) / 10.0, floor((vUv.y + vUv.x * 0.5) * 10.0) / 10.0);\r\n            strength = random(gridUv);\r\n\r\n            break;\r\n        case 26:\r\n           // Pattern 26\r\n            strength = length(vUv);\r\n\r\n            break;\r\n        case 27:\r\n            // Pattern 27\r\n            strength = distance(vUv, vec2(0.5));\r\n\r\n            break;\r\n        case 28:\r\n             // Pattern 28\r\n            strength = 1.0 - distance(vUv, vec2(0.5));\r\n\r\n            break;\r\n        case 29:\r\n          // Pattern 29\r\n            strength = 0.015 / (distance(vUv, vec2(0.5)));\r\n\r\n            break;\r\n        case 30:\r\n             // Pattern 30\r\n            strength = 0.15 / (distance(vec2(vUv.x, (vUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n\r\n            break;\r\n        case 31:\r\n            // Pattern 31\r\n            strength = 0.15 / (distance(vec2(vUv.x, (vUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n            strength *= 0.15 / (distance(vec2(vUv.y, (vUv.x - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n\r\n            break;\r\n        case 32:\r\n            // Pattern 32\r\n            vec2 rotatedUv = rotate(vUv, PI * 0.25, vec2(0.5));\r\n            strength = 0.15 / (distance(vec2(rotatedUv.x, (rotatedUv.y - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n            strength *= 0.15 / (distance(vec2(rotatedUv.y, (rotatedUv.x - 0.5) * 5.0 + 0.5), vec2(0.5)));\r\n\r\n            break;\r\n        case 33:\r\n           // Pattern 33\r\n            strength = step(0.5, distance(vUv, vec2(0.5)) + 0.25);\r\n\r\n            break;\r\n        case 34:\r\n\r\n    // Pattern 34\r\n            strength = abs(distance(vUv, vec2(0.5)) - 0.25);\r\n\r\n            break;\r\n        case 35:\r\n             // Pattern 35\r\n            strength = step(0.01, abs(distance(vUv, vec2(0.5)) - 0.25));\r\n\r\n            break;\r\n        case 36:\r\n           // Pattern 36\r\n            strength = 1.0 - step(0.01, abs(distance(vUv, vec2(0.5)) - 0.25));\r\n\r\n            break;\r\n        case 37:\r\n            // Pattern 37\r\n            wavedUv = vec2(vUv.x, vUv.y + sin(vUv.x * 30.0) * 0.1);\r\n            strength = 1.0 - step(0.01, abs(distance(wavedUv, vec2(0.5)) - 0.25));\r\n\r\n            break;\r\n        case 38:\r\n            // Pattern 38\r\n            wavedUv = vec2(vUv.x + sin(vUv.y * 30.0) * 0.1, vUv.y + sin(vUv.x * 30.0) * 0.1);\r\n            strength = 1.0 - step(0.01, abs(distance(wavedUv, vec2(0.5)) - 0.25));\r\n\r\n            break;\r\n        case 39:\r\n           // Pattern 39\r\n            wavedUv = vec2(vUv.x + sin(vUv.y * 100.0) * 0.1, vUv.y + sin(vUv.x * 100.0) * 0.1);\r\n            strength = 1.0 - step(0.01, abs(distance(wavedUv, vec2(0.5)) - 0.25));\r\n\r\n            break;\r\n        case 40:\r\n             // Pattern 40\r\n            angle = atan(vUv.x, vUv.y);\r\n            strength = angle;\r\n\r\n            break;\r\n        case 41:\r\n             // Pattern 41\r\n            angle = atan(vUv.x - 0.5, vUv.y - 0.5);\r\n            strength = angle;\r\n\r\n            break;\r\n        case 42:\r\n             // Pattern 42\r\n            angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n            strength = angle;\r\n\r\n            break;\r\n        case 43:\r\n         // Pattern 43\r\n            angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n            strength = mod(angle * 20.0, 1.0);\r\n\r\n            break;\r\n        case 44:\r\n             // Pattern 44\r\n            angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n            strength = sin(angle * 100.0);\r\n\r\n            break;\r\n        case 45:\r\n            // Pattern 45\r\n            angle = atan(vUv.x - 0.5, vUv.y - 0.5) / (PI * 2.0) + 0.5;\r\n            float radius = 0.25 + sin(angle * 100.0) * 0.02;\r\n            strength = 1.0 - step(0.01, abs(distance(vUv, vec2(0.5)) - radius));\r\n\r\n            break;\r\n        case 46:\r\n\r\n    // Pattern 46\r\n            strength = cnoise(vUv * 10.0);\r\n\r\n            break;\r\n        case 47:\r\n            // Pattern 47\r\n            strength = step(0.0, cnoise(vUv * 10.0));\r\n\r\n            break;\r\n        case 48:\r\n           // Pattern 48\r\n            strength = 1.0 - abs(cnoise(vUv * 10.0));\r\n\r\n            break;\r\n        case 49:\r\n         // Pattern 49\r\n            strength = sin(cnoise(vUv * 10.0) * 20.0);\r\n\r\n            break;\r\n        case 50:\r\n            // Pattern 50\r\n            strength = step(0.9, sin(cnoise(vUv * 10.0) * 20.0));\r\n            break;\r\n\r\n        default:\r\n            strength = vUv.y;// white\r\n            break;\r\n    }\r\n\r\n    // Final color\r\n    vec3 blackColor = vec3(0.0);\r\n    vec3 uvColor = vec3(vUv, 1.0);\r\n    vec3 mixedColor = mix(blackColor, uvColor, strength);\r\n\r\n    // gl_FragColor = vec4(vec3(strength), 1.0);\r\n    gl_FragColor = vec4(mixedColor, 1.0);\r\n}","// CustomShaderMaterial.js\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls, Float, Text, useGLTF, shaderMaterial } from '@react-three/drei'\r\nimport { useMemo, useState, useRef } from 'react'\r\nimport { useFrame, extend } from '@react-three/fiber'\r\nimport { useControls } from \"leva\";\r\nimport testVertexShader from './vertex.glsl'\r\nimport testFragmentShader from './fragment.glsl'\r\n\r\n\r\nexport default function PatternsShaderMaterial() {\r\n    const mesh = useRef()\r\n    const controls = useControls({\r\n        pattern:\r\n        {\r\n            value: 23,\r\n            min: 5,\r\n            max: 50,\r\n            step: 1\r\n        }\r\n    })\r\n    \r\n    const click = () => {\r\n      shaderMaterial.uniforms.uPattern.value++;\r\n      if(shaderMaterial.uniforms.uPattern.value > 50) shaderMaterial.uniforms.uPattern.value = 5;\r\n    }\r\n    \r\n    // Add leva\r\n    // gui.add(material.uniforms.uFrequency.value, 'x').min(0).max(20).step(0.01).name('frequencyX')\r\n    // gui.add(material.uniforms.uFrequency.value, 'y').min(0).max(20).step(0.01).name('frequencyY')\r\n\r\n    useFrame((state, delta) => {\r\n        // shaderMaterial.uniforms.uTime.value = state.clock.elapsedTime;\r\n    })\r\n    const textureLoader = new THREE.TextureLoader()\r\n    const flagTexture = textureLoader.load('/textures/can-flag.jpg')\r\n    // const CustomShaderMaterial = shaderMaterial(\r\n    //     { uFrequency: new THREE.Vector2(20,10) ,\r\n    //     uTime:  0 ,\r\n    //     uColor:  new THREE.Color('orange') ,\r\n    //     uTexture: flagTexture } , // uniforms\r\n    //     testVertexShader,\r\n    //     testFragmentShader\r\n    //   );\r\n    const shaderMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: testVertexShader,\r\n        fragmentShader: testFragmentShader,\r\n        side: THREE.DoubleSide,\r\n        uniforms:\r\n        {\r\n            uPattern: { value: controls.pattern },\r\n        }\r\n    })\r\n    // const geometry = new THREE.PlaneGeometry(1, 1, 32, 32)\r\n    const geometry = new THREE.BoxGeometry(1)\r\n    // const count = geometry.attributes.position.count\r\n    // const randoms = new Float32Array(count) \r\n    // for (let i = 0; i < count; i++) {\r\n    //     randoms[i] = Math.random()\r\n    // }\r\n\r\n    // geometry.setAttribute('aRandom', new THREE.BufferAttribute(randoms, 1))\r\n    extend({ shaderMaterial });\r\n\r\n    return <>\r\n       \r\n        <mesh geometry={geometry} material={shaderMaterial} useRef={mesh} scale={new THREE.Vector3(2, 2, 2)} onClick={click} position={[0, 0, -1]}\r\n         >\r\n        </mesh>\r\n        {/* <shaderMaterial attach=\"material\" ref={material} /> */}\r\n    </>\r\n}\r\n\r\n\r\n"],"names":["vertex_default","fragment_default","PatternsShaderMaterial","mesh","useRef","controls","useControls","click","shaderMaterial","useFrame","state","delta","THREE.TextureLoader","THREE.ShaderMaterial","testVertexShader","testFragmentShader","THREE.DoubleSide","geometry","THREE.BoxGeometry","extend","jsx","Fragment","THREE.Vector3"],"mappings":"uwBC,GAAyB,CAC7C,MAAMC,EAAOC,EAAAA,OAAO,EACdC,EAAWC,EAAY,CACzB,QACA,CACI,MAAO,GACP,IAAK,EACL,IAAK,GACL,KAAM,CAAA,CACV,CACH,EAEKC,EAAQ,IAAM,CAClBC,EAAe,SAAS,SAAS,QAC9BA,EAAe,SAAS,SAAS,MAAQ,KAAIA,EAAe,SAAS,SAAS,MAAQ,EAC3F,EAMSC,EAAA,CAACC,EAAOC,IAAU,CAAA,CAE1B,EACqB,IAAIC,EAAoB,EACZ,KAAK,wBAAwB,EASzDJ,MAAAA,EAAiB,IAAIK,EAAqB,CAC5C,aAAcC,EACd,eAAgBC,EAChB,KAAMC,EACN,SACA,CACI,SAAU,CAAE,MAAOX,EAAS,OAAQ,CAAA,CACxC,CACH,EAEKY,EAAW,IAAIC,EAAkB,CAAC,EAQjC,OAAAC,EAAA,CAAE,eAAAX,EAAgB,EAIrBY,MAAAC,EAAAA,SAAA,CAAA,SAAAD,EAAA,IAAC,OAAA,CAAK,SAAAH,EAAoB,SAAUT,EAAgB,OAAQL,EAAM,MAAO,IAAImB,EAAc,EAAG,EAAG,CAAC,EAAG,QAASf,EAAO,SAAU,CAAC,EAAG,EAAG,EAAE,CAAA,CAAA,EAI5I,CACJ"}