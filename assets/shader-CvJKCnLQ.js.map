{"version":3,"file":"shader-CvJKCnLQ.js","sources":["../../src/shaders/cursor&particles/vertex.glsl","../../src/shaders/cursor&particles/fragment.glsl","../../src/shaders/cursor&particles/shader.jsx"],"sourcesContent":["uniform  vec2 uResolution;\r\nuniform sampler2D uPictureTexture;\r\nuniform sampler2D uDisplacementTexture;\r\n\r\nvarying vec3 vColor;\r\n\r\nattribute float aIntensity;\r\nattribute float aAngle;\r\n\r\nvoid main()\r\n{\r\n    //displacement\r\n    vec3 newPosition = position;\r\n    float displacementIntensity = texture(uDisplacementTexture, uv).r;\r\n    displacementIntensity  = smoothstep(0.1,0.3 ,displacementIntensity);\r\n    \r\n    vec3 displacement = vec3(cos(aAngle) * 0.2,sin(aAngle) * 0.2,1.0);\r\n    displacement = normalize(displacement);\r\n    displacement *= 3.0;\r\n    displacement *= displacementIntensity;\r\n    displacement *= aIntensity;\r\n    newPosition += displacement;\r\n    \r\n    //final position \r\n    vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0);\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    vec4 projectedPosition = projectionMatrix * viewPosition;\r\n    gl_Position = projectedPosition;\r\n\r\n    //picture\r\n    float pictureIntensity = texture(uPictureTexture, uv).r;\r\n\r\n    \r\n\r\n\r\n\r\n    //point size \r\n    gl_PointSize = 0.1 * pictureIntensity * uResolution.y;\r\n    gl_PointSize *= (1.0 / -viewPosition.z);\r\n\r\n\r\n\r\n    //color\r\n    vColor = vec3(pow(pictureIntensity, 2.0));\r\n}","\r\nvarying vec3 vColor;\r\nvoid main()\r\n{\r\n\r\n    vec2 uv = gl_PointCoord;\r\n    \r\n    float distanceToCenter = distance(uv, vec2(0.5));\r\n    if(distanceToCenter > 0.5)\r\n    {\r\n        discard;\r\n    }\r\n    gl_FragColor = vec4(vColor, 1.0);\r\n\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>   \r\n}","import vertexShader from \"./vertex.glsl\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport * as THREE from \"three\"\r\nimport { useRef, useState } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { Environment } from \"@react-three/drei\";\r\nimport { useControls } from \"leva\";\r\nimport { text } from \"framer-motion/client\";\r\n\r\nexport default function CursorParticles(args) {\r\n    // const particlesGeometry = useRef()\r\n\r\n    document.body.style.backgroundColor = \"#000011\"\r\n    const sizes = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    }\r\n\r\n    \r\n    const displacement =\r\n    {\r\n\r\n    }\r\n\r\n    // 2d canvas\r\n    // useState(() => {\r\n\r\n    // }, [])\r\n\r\n    displacement.canvas = document.createElement('canvas')\r\n    displacement.canvas.width = 128\r\n    displacement.canvas.height = 128\r\n    // document.body.append(displacement.canvas)\r\n    displacement.canvas.style.width = \"256px\"\r\n    displacement.canvas.style.height = \"256px\"\r\n    displacement.canvas.style.position = \"fixed\"\r\n    displacement.canvas.style.top = \"50px\"\r\n    displacement.canvas.style.left = \"0\"\r\n    displacement.canvas.style.zIndex = \"1000\"\r\n    displacement.canvas.style.pointerEvents = \"none\"\r\n\r\n    // context\r\n    displacement.context = displacement.canvas.getContext('2d')\r\n    displacement.context.fillStyle = \"black\"\r\n    displacement.context.fillRect(0, 0, displacement.canvas.width, displacement.canvas.height)\r\n    //glow image\r\n    displacement.glowImage = new Image()\r\n    displacement.glowImage.src = \"/textures/imgs/glow.png\"\r\n\r\n\r\n    //raycaster\r\n    displacement.raycaster = new THREE.Raycaster()\r\n\r\n    //coordinates\r\n    displacement.screenCursor = new THREE.Vector2(999, 999)\r\n    displacement.CanvasCursor = new THREE.Vector2(999, 999)\r\n    displacement.CanvasCursorPrevious = new THREE.Vector2(999, 999)\r\n    //events\r\n    window.addEventListener('mousemove', (event) => {\r\n        displacement.screenCursor.set(\r\n            (event.clientX / sizes.width) * 2 - 1,\r\n            - (event.clientY / sizes.height) * 2 + 1\r\n        )\r\n    })\r\n\r\n    const particlesGeometry = new THREE.PlaneGeometry(10, 10, 128, 128)\r\n\r\n    const intensitiesArray = new Float32Array(particlesGeometry.attributes.position.count)\r\n    const anglesArray = new Float32Array(particlesGeometry.attributes.position.count)\r\n    for (let i = 0; i < particlesGeometry.attributes.position.count; i++) {\r\n        intensitiesArray[i] = Math.random()\r\n        anglesArray[i] = Math.random() * Math.PI * 2\r\n    }\r\n    particlesGeometry.setAttribute('aIntensity', new THREE.BufferAttribute(intensitiesArray, 1))\r\n    particlesGeometry.setAttribute('aAngle', new THREE.BufferAttribute(anglesArray, 1))\r\n    particlesGeometry.setIndex(null)\r\n\r\n\r\n    \r\n\r\n    const textureLoader = new THREE.TextureLoader()\r\n    const pictureTexture1 = textureLoader.load('/textures/imgs/picture-1.png')\r\n    const pictureTexture2 = textureLoader.load('/textures/imgs/picture-2.png')\r\n    const pictureTexture3 = textureLoader.load('/textures/imgs/picture-3.png')\r\n    const pictureTexture4 = textureLoader.load('/textures/imgs/picture-4.png')\r\n\r\n    const controls = useControls({\r\n        picture: {\r\n            value: pictureTexture1,\r\n            options: [pictureTexture1, pictureTexture2, pictureTexture3, pictureTexture4]\r\n        }\r\n    })\r\n    const particlesMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader,\r\n        uniforms:\r\n        {\r\n            uTime: { value: 0 },\r\n            uResolution: new THREE.Uniform(new THREE.Vector2(sizes.width, sizes.height)),\r\n            uPictureTexture: new THREE.Uniform(controls.picture),\r\n            uDisplacementTexture: new THREE.Uniform(displacement.texture)\r\n        }\r\n    })\r\n\r\n\r\n\r\n    //displacement texture\r\n\r\n    displacement.texture = new THREE.CanvasTexture(displacement.canvas)\r\n    \r\n\r\n    const eventHandler = (event) => {\r\n        console.log(event)\r\n        displacement.CanvasCursor.x = event.uv.x * displacement.canvas.width\r\n        displacement.CanvasCursor.y = (1 - event.uv.y) * displacement.canvas.height\r\n    }\r\n\r\n    useFrame(() => {\r\n        particlesMaterial.uniforms.uTime.value += 0.01;\r\n        sizes.width = window.innerWidth;\r\n        sizes.height = window.innerHeight;\r\n        particlesMaterial.uniforms.uResolution.value.set(sizes.width, sizes.height);\r\n        const cursorDistance = displacement.CanvasCursorPrevious.distanceTo(displacement.CanvasCursor)\r\n        const alpha = Math.min(cursorDistance * 0.01, 1)\r\n        displacement.CanvasCursorPrevious.copy(displacement.CanvasCursor)\r\n        //canvas \r\n\r\n        displacement.context.globalCompositeOperation = \"source-over\"\r\n        displacement.context.globalAlpha = 0.02\r\n        displacement.context.fillRect(0, 0, displacement.canvas.width, displacement.canvas.height)\r\n        const glowSize = displacement.canvas.width * 0.25\r\n\r\n        displacement.context.globalCompositeOperation = \"lighten\"\r\n        displacement.context.globalAlpha = alpha\r\n\r\n        displacement.context.drawImage(\r\n            displacement.glowImage,\r\n            displacement.CanvasCursor.x - glowSize * 0.5,\r\n            displacement.CanvasCursor.y - glowSize * 0.5,\r\n            glowSize,\r\n            glowSize)\r\n        //texture\r\n        displacement.texture.needsUpdate = true\r\n        particlesMaterial.uniforms.uDisplacementTexture.value = displacement.texture\r\n        \r\n    })\r\n\r\n    return (\r\n        <>\r\n            <points material={particlesMaterial} geometry={particlesGeometry}>\r\n                {/* <planeGeometry ref={particlesGeometry} attributes={\r\n                    {\r\n                        aIntensity: new THREE.BufferAttribute(intensitiesArray, 1),\r\n                        aAngle: new THREE.BufferAttribute(anglesArray, 1)\r\n                    }\r\n                } args={[10, 10, 128, 128]} /> */}\r\n            </points>\r\n            //interactions\r\n            <mesh onPointerMove={eventHandler} visible={false}>\r\n                <planeGeometry args={[10, 10, 128, 128]} />\r\n                <meshBasicMaterial color=\"white\" side={THREE.DoubleSide}/>\r\n            </mesh>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["vertex_default","fragment_default","CursorParticles","args","sizes","displacement","THREE.Raycaster","THREE.Vector2","event","particlesGeometry","THREE.PlaneGeometry","intensitiesArray","anglesArray","i","THREE.BufferAttribute","textureLoader","THREE.TextureLoader","pictureTexture1","pictureTexture2","pictureTexture3","pictureTexture4","controls","useControls","particlesMaterial","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.Uniform","THREE.CanvasTexture","eventHandler","useFrame","cursorDistance","alpha","glowSize","jsxs","Fragment","jsx","THREE.DoubleSide"],"mappings":"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"}