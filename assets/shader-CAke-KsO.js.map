{"version":3,"file":"shader-CAke-KsO.js","sources":["../../src/shaders/earth/vertex.glsl","../../src/shaders/earth/fragment.glsl","../../src/shaders/earth/atmosphere/fragment.glsl","../../src/shaders/earth/atmosphere/vertex.glsl","../../src/shaders/earth/shader.jsx"],"sourcesContent":["varying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nvoid main()\r\n{\r\n    // Position\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\r\n    \r\n    // Model normal\r\n    vec3 modelNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\r\n    \r\n    vUv = uv;\r\n    vNormal = modelNormal;\r\n    vPosition = modelPosition.xyz;\r\n    \r\n    \r\n}   ","varying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nuniform sampler2D uDayTexture;\r\nuniform sampler2D uNightTexture;\r\nuniform sampler2D uSpecularCloudTexture;\r\nuniform vec3 uSunDirection;\r\nuniform vec3 uAtmosphereDayColor;\r\nuniform vec3 uAtmosphereTwilightColor;\r\n\r\nvoid main()\r\n{\r\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 color = vec3(0.0);\r\n\r\n    //sun orientation \r\n\r\n    float sunOrientation = dot(normal, uSunDirection); // \r\n    \r\n    //day - night color\r\n    float dayMix = smoothstep(-0.25, 0.5, sunOrientation);\r\n    vec3 dayColor = texture(uDayTexture, vUv).rgb;\r\n    vec3 nightColor = texture(uNightTexture, vUv).rgb;\r\n\r\n    color = mix(nightColor, dayColor, dayMix);\r\n\r\n    // Specular clouds color\r\n    vec2 specularCloudsColor = texture(uSpecularCloudTexture, vUv).rg;\r\n    float cloudMix = smoothstep(0.1, 1.0, specularCloudsColor.g);\r\n    cloudMix *= dayMix;\r\n    color = mix(color, vec3(1.0), cloudMix);\r\n\r\n    //fresnel \r\n    float fresnel = dot(viewDirection, normal) + 1.0;\r\n    fresnel = pow(fresnel, 2.0);\r\n   \r\n\r\n    //atmosphere color\r\n    float atmosphereDayMix = smoothstep(-0.5, 1.0, sunOrientation);\r\n    vec3 athmosphereColor = mix(uAtmosphereTwilightColor, uAtmosphereDayColor, atmosphereDayMix);\r\n    color = mix(color, athmosphereColor, fresnel * atmosphereDayMix);\r\n\r\n    //specular \r\n     vec3 reflection = reflect(-uSunDirection, normal);\r\n     float specular = - dot(reflection, viewDirection);\r\n     specular = max(specular, 0.0);\r\n     specular = pow(specular, 30.0);\r\n     specular *= specularCloudsColor.r;\r\n\r\n     vec3 specularColor = mix(vec3(1.0), athmosphereColor, fresnel);\r\n     color += vec3(specular * specularColor);\r\n    //final color\r\n    gl_FragColor = vec4(color, 1.0);\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>\r\n}","uniform vec3 uSunDirection;\r\nuniform vec3 uAtmosphereDayColor;\r\nuniform vec3 uAtmosphereTwilightColor;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec3 vPosition;\r\n\r\nvoid main()\r\n{\r\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\r\n    vec3 normal = normalize(vNormal);\r\n    vec3 color = vec3(0.0);\r\n\r\n    // Sun orientation\r\n    float sunOrientation = dot(uSunDirection, normal);\r\n\r\n    // Atmosphere\r\n    float atmosphereDayMix = smoothstep(- 0.5, 1.0, sunOrientation);\r\n    vec3 atmosphereColor = mix(uAtmosphereTwilightColor, uAtmosphereDayColor, atmosphereDayMix);\r\n    color = mix(color, atmosphereColor, atmosphereDayMix);\r\n\r\n    //alpha \r\n    float edgeAlpha = dot(viewDirection, normal);\r\n    edgeAlpha = smoothstep(0.0, 0.5, edgeAlpha);\r\n\r\n    float dayAlpha = smoothstep(-0.5, 0.0, sunOrientation);\r\n    float alpha = edgeAlpha * dayAlpha;   // Final color\r\n    gl_FragColor = vec4(color, alpha);\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>\r\n}","varying vec3 vNormal;\r\nvarying vec3 vPosition;\r\n\r\nvoid main()\r\n{\r\n    // Position\r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\r\n\r\n    // Model normal\r\n    vec3 modelNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\r\n\r\n    // Varyings\r\n    vNormal = modelNormal;\r\n    vPosition = modelPosition.xyz;\r\n}","import vertexShader from \"./vertex.glsl\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport * as THREE from \"three\"\r\nimport { useRef } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { Environment } from \"@react-three/drei\";\r\nimport { useControls } from \"leva\";\r\nimport atmosphereFragmentShader from \"./atmosphere/fragment.glsl\"\r\nimport atmosphereVertexShader from \"./atmosphere/vertex.glsl\"\r\nexport default function Earth(args) {\r\n    const earth = useRef()\r\n    const sunRef = useRef()\r\n    document.body.style.backgroundColor = \"#000011\"\r\n\r\n    //texture\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const earthDayTexture = textureLoader.load(\"./textures/earth/day.jpg\");\r\n    earthDayTexture.colorSpace = THREE.SRGBColorSpace;\r\n    earthDayTexture.anisotropy = 8;\r\n    const earthNightTexture = textureLoader.load(\"./textures/earth/night.jpg\");\r\n    earthNightTexture.colorSpace = THREE.SRGBColorSpace;\r\n    earthNightTexture.anisotropy = 8;\r\n    const earthCloudTexture = textureLoader.load(\"./textures/earth/specularClouds.jpg\");\r\n    earthCloudTexture.colorSpace = THREE.SRGBColorSpace;\r\n    earthCloudTexture.anisotropy = 8;\r\n    const sunTexture = textureLoader.load(\"./textures/sun/2k_sun.jpg\");\r\n    sunTexture.colorSpace = THREE.SRGBColorSpace;\r\n    sunTexture.anisotropy = 8;\r\n\r\n    const controls = useControls({\r\n        usunSphericalPhi:\r\n        {\r\n            value: Math.PI * 0.5, min: 0, max: Math.PI, step: 0.01,\r\n            \r\n        },\r\n        usunSphericalTheta: { \r\n            value: -1.4, min: -Math.PI ,max: Math.PI, step: 0.01,\r\n         },\r\n         uAtmosphereDayColor : {value:\"#00aaff\"},\r\n         uAtmosphereTwilightColor : {value:\"#ff6600\"},\r\n\r\n    })\r\n    // sun\r\n    const sunSpherical = new THREE.Spherical(1, controls.usunSphericalPhi, controls.usunSphericalTheta)\r\n    const sunDirection = new THREE.Vector3()\r\n    sunDirection.setFromSpherical(sunSpherical)\r\n    console.log(sunDirection)\r\n    \r\n    const material = new THREE.ShaderMaterial({\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader,\r\n        uniforms:\r\n        {\r\n            uDayTexture: new THREE.Uniform(earthDayTexture),\r\n            uNightTexture: new THREE.Uniform(earthNightTexture),\r\n            uSpecularCloudTexture: new THREE.Uniform(earthCloudTexture),\r\n            uSunDirection: new THREE.Uniform(new THREE.Vector3(sunDirection)),\r\n            uAtmosphereDayColor : new THREE.Uniform(new THREE.Color(controls.uAtmosphereDayColor)),\r\n            uAtmosphereTwilightColor : new THREE.Uniform(new THREE.Color(controls.uAtmosphereTwilightColor)),\r\n        }\r\n    })\r\n    const atmosphereMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: atmosphereVertexShader,\r\n        fragmentShader: atmosphereFragmentShader,\r\n        uniforms:\r\n        {\r\n            uSunDirection: new THREE.Uniform(new THREE.Vector3(sunDirection)),\r\n            uAtmosphereDayColor : new THREE.Uniform(new THREE.Color(controls.uAtmosphereDayColor)),\r\n            uAtmosphereTwilightColor : new THREE.Uniform(new THREE.Color(controls.uAtmosphereTwilightColor)),\r\n        },\r\n        side: THREE.BackSide,\r\n        transparent:true,\r\n    })\r\n    const updateSun = () => {\r\n        sunDirection.setFromSpherical(sunSpherical)\r\n        if (sunRef.current) {\r\n            sunRef.current.position.copy(sunDirection).multiplyScalar(5)\r\n        }\r\n        material.uniforms.uSunDirection.value.copy(sunDirection)\r\n        atmosphereMaterial.uniforms.uSunDirection.value.copy(sunDirection)\r\n    }\r\n    updateSun()\r\n    \r\n    useFrame(() => {\r\n        if (earth.current) {\r\n            // earth.current.rotation.x += 0.01;\r\n            earth.current.rotation.y += 0.001;\r\n        }\r\n        if (sunRef.current) {\r\n            sunRef.current.rotation.y += 0.002;\r\n            // sunSpherical.theta += 0.001;\r\n            updateSun()\r\n        }\r\n        // material.uniforms.uTime.value += 0.01;\r\n    })\r\n    \r\n    return (\r\n        <>\r\n              <Environment\r\n              backgroundBlurriness={0}\r\n                files={\"textures/sun/stars.jpg\"}\r\n                background  \r\n                encoding={THREE.sRGBEncoding}\r\n              ></Environment>\r\n            <mesh ref={earth} material={material}>\r\n                <sphereGeometry args={[3, 64, 64]} />\r\n            </mesh>\r\n            <mesh material={atmosphereMaterial} >\r\n                <sphereGeometry args={[3.1, 64, 64] } />\r\n            </mesh>\r\n            {/* debug sun  */}\r\n            <mesh ref={sunRef}  >\r\n                <sphereGeometry args={[0.2, 64, 64]} />\r\n                <meshBasicMaterial color=\"yellow\" map={sunTexture} />\r\n            </mesh>\r\n        </>\r\n    )\r\n}\r\n\r\n"],"names":["vertex_default","fragment_default","Earth","args","earth","useRef","sunRef","textureLoader","THREE.TextureLoader","earthDayTexture","THREE.SRGBColorSpace","earthNightTexture","earthCloudTexture","sunTexture","controls","useControls","sunSpherical","THREE.Spherical","sunDirection","THREE.Vector3","material","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.Uniform","THREE.Color","atmosphereMaterial","atmosphereVertexShader","atmosphereFragmentShader","THREE.BackSide","updateSun","useFrame","jsxs","Fragment","jsx","Environment","THREE.sRGBEncoding"],"mappingswBE,EAAMC,EAAM,CAChC,MAAMC,EAAQC,EAAAA,OAAO,EACfC,EAASD,EAAAA,OAAO,EACb,SAAA,KAAK,MAAM,gBAAkB,UAGhC,MAAAE,EAAgB,IAAIC,EACpBC,EAAkBF,EAAc,KAAK,0BAA0B,EACrEE,EAAgB,WAAaC,EAC7BD,EAAgB,WAAa,EACvB,MAAAE,EAAoBJ,EAAc,KAAK,4BAA4B,EACzEI,EAAkB,WAAaD,EAC/BC,EAAkB,WAAa,EACzB,MAAAC,EAAoBL,EAAc,KAAK,qCAAqC,EAClFK,EAAkB,WAAaF,EAC/BE,EAAkB,WAAa,EACzB,MAAAC,EAAaN,EAAc,KAAK,2BAA2B,EACjEM,EAAW,WAAaH,EACxBG,EAAW,WAAa,EAExB,MAAMC,EAAWC,EAAY,CACzB,iBACA,CACI,MAAO,KAAK,GAAK,GAAK,IAAK,EAAG,IAAK,KAAK,GAAI,KAAM,GAEtD,EACA,mBAAoB,CAChB,MAAO,KAAM,IAAK,CAAC,KAAK,GAAI,IAAK,KAAK,GAAI,KAAM,GACnD,EACA,oBAAsB,CAAC,MAAM,SAAS,EACtC,yBAA2B,CAAC,MAAM,SAAS,CAAA,CAE/C,EAEKC,EAAe,IAAIC,EAAgB,EAAGH,EAAS,iBAAkBA,EAAS,kBAAkB,EAC5FI,EAAe,IAAIC,EACzBD,EAAa,iBAAiBF,CAAY,EAC1C,QAAQ,IAAIE,CAAY,EAElB,MAAAE,EAAW,IAAIC,EAAqB,CAAA,aACtCC,EAAA,eACAC,EACA,SACA,CACI,YAAa,IAAIC,EAAcf,CAAe,EAC9C,cAAe,IAAIe,EAAcb,CAAiB,EAClD,sBAAuB,IAAIa,EAAcZ,CAAiB,EAC1D,cAAe,IAAIY,EAAc,IAAIL,EAAcD,CAAY,CAAC,EAChE,oBAAsB,IAAIM,EAAc,IAAIC,EAAYX,EAAS,mBAAmB,CAAC,EACrF,yBAA2B,IAAIU,EAAc,IAAIC,EAAYX,EAAS,wBAAwB,CAAC,CAAA,CACnG,CACH,EACKY,EAAqB,IAAIL,EAAqB,CAChD,aAAcM,EACd,eAAgBC,EAChB,SACA,CACI,cAAe,IAAIJ,EAAc,IAAIL,EAAcD,CAAY,CAAC,EAChE,oBAAsB,IAAIM,EAAc,IAAIC,EAAYX,EAAS,mBAAmB,CAAC,EACrF,yBAA2B,IAAIU,EAAc,IAAIC,EAAYX,EAAS,wBAAwB,CAAC,CACnG,EACA,KAAMe,EACN,YAAY,EAAA,CACf,EACKC,EAAY,IAAM,CACpBZ,EAAa,iBAAiBF,CAAY,EACtCV,EAAO,SACPA,EAAO,QAAQ,SAAS,KAAKY,CAAY,EAAE,eAAe,CAAC,EAE/DE,EAAS,SAAS,cAAc,MAAM,KAAKF,CAAY,EACvDQ,EAAmB,SAAS,cAAc,MAAM,KAAKR,CAAY,CACrE,EACU,OAAAY,EAAA,EAEVC,EAAS,IAAM,CACP3B,EAAM,UAEAA,EAAA,QAAQ,SAAS,GAAK,MAE5BE,EAAO,UACAA,EAAA,QAAQ,SAAS,GAAK,KAEnBwB,EAAA,EACd,CAEH,EAISE,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAACC,EAAA,CACD,qBAAsB,EACpB,MAAO,yBACP,WAAU,GACV,SAAUC,MAAM,CACjB,EACFF,EAAA,IAAA,OAAA,CAAK,IAAK9B,EAAO,SAAAgB,EACd,SAAAc,EAAA,IAAC,iBAAe,CAAA,KAAM,CAAC,EAAG,GAAI,EAAE,CAAG,CAAA,EACvC,EACCA,EAAA,IAAA,OAAA,CAAK,SAAUR,EACZ,SAACQ,EAAAA,IAAA,iBAAA,CAAe,KAAM,CAAC,IAAK,GAAI,EAAE,CAAA,CAAI,CAC1C,CAAA,EAEAF,EAAAA,KAAC,OAAK,CAAA,IAAK1B,EACP,SAAA,CAAA4B,EAAA,IAAC,kBAAe,KAAM,CAAC,GAAK,GAAI,EAAE,EAAG,EACpCA,EAAA,IAAA,oBAAA,CAAkB,MAAM,SAAS,IAAKrB,CAAY,CAAA,CAAA,CACvD,CAAA,CAAA,EACJ,CAER"}