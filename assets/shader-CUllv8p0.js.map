{"version":3,"file":"shader-CUllv8p0.js","sources":["../../src/shaders/holographic/vertex.glsl","../../src/shaders/holographic/fragment.glsl","../../src/shaders/holographic/shader.jsx"],"sourcesContent":["varying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nuniform sampler2D uPerlinTexture;\r\nuniform float uTime;\r\n\r\nfloat random2D(vec2 value) {\r\n    return fract(sin(dot(value.xy, vec2(12.9898, 78.233))) * 43785.5453123);\r\n}\r\nvoid main() {\r\n\r\n    //position \r\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n\r\n    //glitch\r\n    float glitchTime = uTime - modelPosition.y;\r\n    float glitch = sin(glitchTime) + sin(glitchTime * 3.45) + sin(glitchTime * 8.76);\r\n    glitch /= 3.0;\r\n    smoothstep(0.3, 1.0, glitch);\r\n    glitch *= 0.25;\r\n    modelPosition.x += (random2D(modelPosition.xz + uTime) - 0.5) * glitch;\r\n    modelPosition.z += (random2D(modelPosition.zx + uTime) - 0.5) * glitch;\r\n\r\n    //model Normal \r\n    vec4 modelNormal = modelMatrix * vec4(normal, 0.0);\r\n\r\n    //final position\r\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\r\n\r\n    //VARYINGS \r\n    //vUv = uv;\r\n    vPosition = modelPosition.xyz;\r\n    vNormal = modelNormal.xyz;\r\n\r\n}","uniform sampler2D uPerlinTexture;\r\nuniform float uTime;\r\nuniform vec3 uColor;\r\n// varying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n\r\n    //normal\r\n    vec3 normal = normalize(vNormal);\r\n    if(!gl_FrontFacing) {\r\n        normal *= -1.0;\r\n    }\r\n     //stripes \r\n    float stripes = mod((vPosition.y - uTime * 0.03) * 20.0, 1.0);\r\n    stripes = pow(stripes, 3.0);\r\n    // fresnel\r\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\r\n    float fresnel = dot(viewDirection, normal) + 1.0;\r\n    fresnel = pow(fresnel, 2.0);\r\n\r\n\r\n    //FALLOFF\r\n    float falloff = smoothstep(0.8, 0.0,fresnel);\r\n\r\n    //holographic \r\n    float holographic = stripes * fresnel;\r\n    holographic += fresnel * 1.25;\r\n    holographic*= falloff;\r\n\r\n\r\n    gl_FragColor = vec4(uColor, holographic);\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>\r\n\r\n}","// CustomShaderMaterial.js\r\nimport * as THREE from \"three\";\r\nimport {\r\n  OrbitControls,\r\n  Float,\r\n  Text,\r\n  useGLTF,\r\n  shaderMaterial,\r\n  Sky,\r\n  Environment,\r\n} from \"@react-three/drei\";\r\n\r\nimport { useMemo, useState, useRef, Suspense } from \"react\";\r\nimport { useFrame, extend } from \"@react-three/fiber\";\r\nimport Placeholder from \"../../models/Placeholder\";\r\nimport VertexShader from \"./vertex.glsl\";\r\nimport FragmentShader from \"./fragment.glsl\";\r\nimport { useControls } from \"leva\";\r\n\r\n\r\nexport default function HolographicMaterial() {\r\n  const torus = useRef()\r\n  const controls = useControls({\r\n    uHolographicColor:\"#0000ff\"\r\n  })\r\n  let uTime = 0;\r\n  const torusGeometry = new THREE.TorusKnotGeometry()\r\n  const textureLoader = new THREE.TextureLoader();\r\n  const perlinTexture = textureLoader.load(\"./textures/perlin.png\");\r\n  perlinTexture.wrapS = THREE.RepeatWrapping\r\n  perlinTexture.wrapT = THREE.RepeatWrapping\r\n  const holographicMaterial = new THREE.ShaderMaterial({\r\n    transparent: true,\r\n    vertexShader: VertexShader,\r\n    fragmentShader: FragmentShader,\r\n    wireframe:false,\r\n    uniforms: {\r\n      uTime: new THREE.Uniform(0),\r\n      uPerlinTexture: new THREE.Uniform(perlinTexture),\r\n      uColor :new THREE.Uniform(new THREE.Color(controls.uHolographicColor)),\r\n    },\r\n    depthWrite:false,\r\n    blending: THREE.AdditiveBlending,\r\n\r\n  });\r\n  useFrame((state, delta) => {\r\n    uTime = state.clock.elapsedTime ;\r\n    holographicMaterial.uniforms.uTime.value = uTime\r\n    torus.current.rotation.y += 0.005\r\n  });\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n      \r\n      <mesh\r\n        geometry={torusGeometry}\r\n        material={holographicMaterial}\r\n        ref={torus}\r\n        // rotation={[Math.PI / 2, 0, 0]}\r\n        // position={[0, 1.2, 0]}\r\n        // wireframe\r\n        // scale={new THREE.Vector3(4, 3, 1)}\r\n      ></mesh>\r\n      <ambientLight intensity={0.5}></ambientLight>\r\n      <directionalLight\r\n        castShadow\r\n        position={[4, 2, -2.25]}\r\n        intensity={10}\r\n      ></directionalLight>\r\n      \r\n    </>\r\n  );\r\n}\r\n"],"names":["vertex_default","fragment_default","HolographicMaterial","torus","useRef","controls","useControls","uTime","torusGeometry","THREE.TorusKnotGeometry","perlinTexture","THREE.TextureLoader","THREE.RepeatWrapping","holographicMaterial","THREE.ShaderMaterial","VertexShader","FragmentShader","THREE.Uniform","THREE.Color","THREE.AdditiveBlending","useFrame","state","delta","jsxs","Fragment","jsx"],"mappings":"8GAAA,IAAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GCoBA,SAAwBC,GAAsB,CAC5C,MAAMC,EAAQC,EAAAA,OAAO,EACfC,EAAWC,EAAY,CAC3B,kBAAkB,SAAA,CACnB,EACD,IAAIC,EAAQ,EACN,MAAAC,EAAgB,IAAIC,EAEpBC,EADgB,IAAIC,EAAoB,EACV,KAAK,uBAAuB,EAChED,EAAc,MAAQE,EACtBF,EAAc,MAAQE,EAChB,MAAAC,EAAsB,IAAIC,EAAqB,CACnD,YAAa,GACb,aAAcC,EACd,eAAgBC,EAChB,UAAU,GACV,SAAU,CACR,MAAO,IAAIC,EAAc,CAAC,EAC1B,eAAgB,IAAIA,EAAcP,CAAa,EAC/C,OAAQ,IAAIO,EAAc,IAAIC,EAAYb,EAAS,iBAAiB,CAAC,CACvE,EACA,WAAW,GACX,SAAUc,CAAM,CAEjB,EACQ,OAAAC,EAAA,CAACC,EAAOC,IAAU,CACzBf,EAAQc,EAAM,MAAM,YACAR,EAAA,SAAS,MAAM,MAAQN,EACrCJ,EAAA,QAAQ,SAAS,GAAK,IAAA,CAC7B,EAOGoB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAAC,OAAA,CACC,SAAUjB,EACV,SAAUK,EACV,IAAKV,CAAA,CAKN,EACDsB,EAAAA,IAAC,eAAa,CAAA,UAAW,EAAK,CAAA,EAC9BA,EAAA,IAAC,mBAAA,CACC,WAAU,GACV,SAAU,CAAC,EAAG,EAAG,KAAK,EACtB,UAAW,EAAA,CAAA,CACZ,EAEH,CAEJ"}