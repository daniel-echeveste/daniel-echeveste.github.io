{"version":3,"file":"shader-C2yWN3zz.js","sources":["../../node_modules/@react-three/drei/core/Texture.js","../../src/models/HeadModel.jsx","../../src/shaders/modifiedMaterials/shader.jsx"],"sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nimport { TextureLoader, Texture as Texture$1 } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof Texture$1) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof Texture$1) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = useMemo(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\n//\n\nconst Texture = ({\n  children,\n  input,\n  onLoad\n}) => {\n  const ret = useTexture(input, onLoad);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(ret));\n};\n\nexport { IsObject, Texture, useTexture };\n","import { useGLTF, useTexture } from \"@react-three/drei\"\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\nexport default function HeadModel(args){\r\n    const model = useGLTF('models/LeePerrySmith/LeePerrySmith.glb')\r\n    // https://drive.google.com/file/d//view?usp=drive_link\r\n    // https://drive.google.com/uc?export=download&id=177uJEdrBdmhCUCqCEEarenVaEDf2oGg-\r\n    // const model = useGLTF('https://daniel-echeveste.github.io/models/LeePerrySmith/LeePerrySmith.glb')\r\n   \r\n    console.log(\"modelo\");\r\n    console.log(model);\r\n    model.materials[\"Material.002\"].map = useTexture('models/LeePerrySmith/color.jpg')\r\n    // model.materials[\"Material.002\"].color = useTexture('models/LeePerrySmith/color.jpg')\r\n    model.materials[\"Material.002\"].normal = useTexture('models/LeePerrySmith/normal.jpg')\r\n    model.materials[\"Material.002\"].normalMap = useTexture('models/LeePerrySmith/normal.jpg')\r\n\r\n\r\n   \r\n    const customUniforms = {\r\n        uTime : {value:0}\r\n    }\r\n\r\n    useFrame((state, delta) => {\r\n        customUniforms.uTime.value = state.clock.elapsedTime;\r\n    })\r\n\r\n    model.materials[\"Material.002\"].onBeforeCompile = (shader)=>{\r\n        console.log(shader.vertexShader)\r\n        shader.uniforms.uTime = customUniforms.uTime\r\n        shader.vertexShader = shader.vertexShader.replace( \r\n            '#include <common>',\r\n            `\r\n            #include <common>\r\n            \r\n            uniform float uTime;\r\n\r\n            mat2 get2dRotateMatrix(float _angle)\r\n            {\r\n                return mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\r\n            }\r\n            \r\n            `)\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            '#include <begin_vertex>',\r\n            `\r\n            #include <begin_vertex>\r\n            \r\n            float angle = (position.y + uTime) * 0.8;\r\n            \r\n            mat2 rotateMatrix = get2dRotateMatrix(angle);\r\n\r\n            transformed.xz = rotateMatrix * transformed.xz;\r\n            \r\n            `)\r\n    }\r\n    // model.materials[0].color = useTexture('models/LeePerrySmith/color.jpg')\r\n    \r\n    \r\n    return <primitive object={model.scene} castShadow position-z={-4} scale={1}/>\r\n}\r\nuseGLTF.preload('models/LeePerrySmith/LeePerrySmith.glb')","// CustomShaderMaterial.js\r\nimport * as THREE from \"three\";\r\nimport {\r\n  OrbitControls,\r\n  Float,\r\n  Text,\r\n  useGLTF,\r\n  shaderMaterial,\r\n  Sky,\r\n  Environment,\r\n  \r\n} from \"@react-three/drei\";\r\n\r\nimport { useMemo, useState, useRef, Suspense } from \"react\";\r\nimport { useFrame, extend, } from \"@react-three/fiber\";\r\nimport Placeholder from \"../../models/Placeholder\";\r\nimport HeadModel from \"../../models/HeadModel\";\r\n// import testVertexShader from './vertex.glsl'\r\n// import testFragmentShader from './fragment.glsl'\r\nimport { useControls } from \"leva\";\r\n\r\nexport default function ModifiedMaterial() {\r\n  return (\r\n    <>\r\n    <ambientLight intensity={0.5}></ambientLight>\r\n   \r\n    <directionalLight castShadow position={[4, 2, - 2.25]} intensity={10}></directionalLight>\r\n      <Environment\r\n        files={\"textures/environmentMaps/red_wall_4k.hdr\"}\r\n        background\r\n        \r\n      ></Environment>\r\n      <Suspense fallback={<Placeholder position-y={0.5} scale={[2, 3, 2]} />}>\r\n        <HeadModel ></HeadModel>\r\n      </Suspense>\r\n      \r\n      <mesh position={[-5,0,-4]} rotation={[0,Math.PI/2,0]} scale={[15,15,15]} receiveShadow>\r\n        <planeGeometry></planeGeometry>\r\n        <meshStandardMaterial color={\"white\"}></meshStandardMaterial>\r\n      </mesh>\r\n    </>\r\n  );\r\n}\r\n"],"names":["IsObject","url","useTexture","input","onLoad","gl","useThree","state","textures","useLoader","TextureLoader","useLayoutEffect","useEffect","textureArray","Texture$1","texture","useMemo","keyed","i","key","HeadModel","args","model","useGLTF","customUniforms","useFrame","delta","shader","jsx","ModifiedMaterial","jsxs","Fragment","Environment","Suspense","Placeholder"],"mappings":"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","x_google_ignoreList":[0]}